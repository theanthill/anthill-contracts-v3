{
  "address": "0x8600A745296BB82efF197d9B538eb1ECe9910d62",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "encodedANT",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "encodedBNB",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "encodedBUSD",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_base",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "getReferenceData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedQuote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStdReference.ReferenceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_bases",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_quotes",
          "type": "string[]"
        }
      ],
      "name": "getReferenceDataBulk",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedQuote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStdReference.ReferenceData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setTestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "testRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4451c2b3d5e3c82570e1005bc7ffcc8bfa4724b08e8d46b5c547b4567b8bb3d6",
  "receipt": {
    "to": null,
    "from": "0xc892cfd3e75Cf428BDD25576e9a42D515697B2C7",
    "contractAddress": "0x8600A745296BB82efF197d9B538eb1ECe9910d62",
    "transactionIndex": 0,
    "gasUsed": "4275430",
    "logsBloom": "0x
    "blockHash": "0x9c5bbf96338639868abfde6f395598d3fb5eb683919234c9e29179eae6359701",
    "transactionHash": "0x4451c2b3d5e3c82570e1005bc7ffcc8bfa4724b08e8d46b5c547b4567b8bb3d6",
    "logs": [],
    "blockNumber": 4489137,
    "cumulativeGasUsed": "838310",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "f0c622e7ff1045b373fd9244c6e43670",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"encodedANT\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodedBNB\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"encodedBUSD\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"getReferenceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_bases\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_quotes\",\"type\":\"string[]\"}],\"name\":\"getReferenceDataBulk\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"testRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getReferenceData(string,string)\":{\"notice\":\"Returns the price data for the given base/quote pair. Revert if not available.\"},\"getReferenceDataBulk(string[],string[])\":{\"notice\":\"Similar to getReferenceData, but with multiple base/quote pairs at once.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockStdReference.sol\":\"MockStdReference\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0x648d70a273f88c5ca7718f3d35aad3938e2bb8143817d3c98303235499f98049\",\"license\":\"MIT\"},\"contracts/test/MockStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStdReference.sol\\\";\\n\\ncontract MockStdReference is IStdReference {\\n    uint256 public testRate = 1e18;\\n\\n    bytes32 public encodedANT;\\n    bytes32 public encodedBNB;\\n    bytes32 public encodedBUSD;\\n\\n    constructor() {\\n        encodedANT = keccak256(abi.encodePacked(\\\"ANT\\\"));\\n        encodedBNB = keccak256(abi.encodePacked(\\\"BNB\\\"));\\n        encodedBUSD = keccak256(abi.encodePacked(\\\"BUSD\\\"));\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(\\n        string memory _base,\\n        string memory /*_quote*/\\n    ) public view override returns (ReferenceData memory) {\\n        ReferenceData memory data;\\n\\n        bytes32 encodedBase = keccak256(abi.encodePacked(_base));\\n\\n        if (encodedBase == encodedANT) {\\n            data.rate = testRate;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else if (encodedBase == encodedBNB) {\\n            data.rate = 300 * 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else if (encodedBase == encodedBUSD) {\\n            data.rate = 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else {\\n            data.rate = 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        }\\n\\n        return data;\\n    }\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        override\\n        returns (ReferenceData[] memory)\\n    {\\n        ReferenceData[] memory data = new ReferenceData[](_bases.length);\\n\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            data[i] = getReferenceData(_bases[i], _quotes[i]);\\n        }\\n\\n        return data;\\n    }\\n\\n    function setTestRate(uint256 rate) external {\\n        testRate = rate;\\n    }\\n}\\n\",\"keccak256\":\"0x4ee1e5dedc021c5dfd9e30b24d4f5b2722efe83caa8662561432ebc68cc664b2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060005534801561001c57600080fd5b5060405160200161002c906100b7565b60408051601f198184030181529082905280516020918201206001556100529101610098565b60408051601f1981840301815290829052805160209182012060025561007891016100a7565b60408051601f1981840301815291905280516020909101206003556100c6565b6221272160e91b815260030190565b63109554d160e21b815260040190565b6210539560ea1b815260030190565b610562806100d56000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c806365555bcc1161005b57806365555bcc146100b057806393183aea146100d0578063beb462d9146100d8578063e42a071b146100ed5761007d565b80630bb3d0d8146100825780630ecfa4ca146100a0578063136462b9146100a8575b600080fd5b61008a61010d565b604051610097919061051a565b60405180910390f35b61008a610113565b61008a610119565b6100c36100be36600461040b565b61011f565b6040516100979190610523565b61008a6101f0565b6100eb6100e6366004610462565b6101f6565b005b6101006100fb3660046103aa565b6101fb565b60405161009791906104cc565b60005481565b60035481565b60015481565b6101276102af565b61012f6102af565b6000846040516020016101429190610493565b60405160208183030381529060405280519060200120905060015481141561017b576000805483526020830181905260408301526101e6565b6002548114156101a457681043561a8829300000825260006020830181905260408301526101e6565b6003548114156101cc57670de0b6b3a7640000825260006020830181905260408301526101e6565b670de0b6b3a7640000825260006020830181905260408301525b5090505b92915050565b60025481565b600055565b60606000835167ffffffffffffffff8111801561021757600080fd5b5060405190808252806020026020018201604052801561025157816020015b61023e6102af565b8152602001906001900390816102365790505b50905060005b81518110156101e65761029085828151811061026f57fe5b602002602001015185838151811061028357fe5b602002602001015161011f565b82828151811061029c57fe5b6020908102919091010152600101610257565b60405180606001604052806000815260200160008152602001600081525090565b600082601f8301126102e0578081fd5b8135602067ffffffffffffffff8211156102f657fe5b6103038182840201610531565b82815281810190858301855b8581101561033857610326898684358b0101610345565b8452928401929084019060010161030f565b5090979650505050505050565b600082601f830112610355578081fd5b813567ffffffffffffffff81111561036957fe5b61037c601f8201601f1916602001610531565b818152846020838601011115610390578283fd5b816020850160208301379081016020019190915292915050565b600080604083850312156103bc578182fd5b823567ffffffffffffffff808211156103d3578384fd5b6103df868387016102d0565b935060208501359150808211156103f4578283fd5b50610401858286016102d0565b9150509250929050565b6000806040838503121561041d578182fd5b823567ffffffffffffffff80821115610434578384fd5b61044086838701610345565b93506020850135915080821115610455578283fd5b5061040185828601610345565b600060208284031215610473578081fd5b5035919050565b8051825260208082015190830152604090810151910152565b60008251815b818110156104b35760208186018101518583015201610499565b818111156104c15782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561050e576104fb83855161047a565b92840192606092909201916001016104e8565b50909695505050505050565b90815260200190565b606081016101ea828461047a565b60405181810167ffffffffffffffff8111828210171561054d57fe5b60405291905056fea164736f6c6343000706000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c806365555bcc1161005b57806365555bcc146100b057806393183aea146100d0578063beb462d9146100d8578063e42a071b146100ed5761007d565b80630bb3d0d8146100825780630ecfa4ca146100a0578063136462b9146100a8575b600080fd5b61008a61010d565b604051610097919061051a565b60405180910390f35b61008a610113565b61008a610119565b6100c36100be36600461040b565b61011f565b6040516100979190610523565b61008a6101f0565b6100eb6100e6366004610462565b6101f6565b005b6101006100fb3660046103aa565b6101fb565b60405161009791906104cc565b60005481565b60035481565b60015481565b6101276102af565b61012f6102af565b6000846040516020016101429190610493565b60405160208183030381529060405280519060200120905060015481141561017b576000805483526020830181905260408301526101e6565b6002548114156101a457681043561a8829300000825260006020830181905260408301526101e6565b6003548114156101cc57670de0b6b3a7640000825260006020830181905260408301526101e6565b670de0b6b3a7640000825260006020830181905260408301525b5090505b92915050565b60025481565b600055565b60606000835167ffffffffffffffff8111801561021757600080fd5b5060405190808252806020026020018201604052801561025157816020015b61023e6102af565b8152602001906001900390816102365790505b50905060005b81518110156101e65761029085828151811061026f57fe5b602002602001015185838151811061028357fe5b602002602001015161011f565b82828151811061029c57fe5b6020908102919091010152600101610257565b60405180606001604052806000815260200160008152602001600081525090565b600082601f8301126102e0578081fd5b8135602067ffffffffffffffff8211156102f657fe5b6103038182840201610531565b82815281810190858301855b8581101561033857610326898684358b0101610345565b8452928401929084019060010161030f565b5090979650505050505050565b600082601f830112610355578081fd5b813567ffffffffffffffff81111561036957fe5b61037c601f8201601f1916602001610531565b818152846020838601011115610390578283fd5b816020850160208301379081016020019190915292915050565b600080604083850312156103bc578182fd5b823567ffffffffffffffff808211156103d3578384fd5b6103df868387016102d0565b935060208501359150808211156103f4578283fd5b50610401858286016102d0565b9150509250929050565b6000806040838503121561041d578182fd5b823567ffffffffffffffff80821115610434578384fd5b61044086838701610345565b93506020850135915080821115610455578283fd5b5061040185828601610345565b600060208284031215610473578081fd5b5035919050565b8051825260208082015190830152604090810151910152565b60008251815b818110156104b35760208186018101518583015201610499565b818111156104c15782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561050e576104fb83855161047a565b92840192606092909201916001016104e8565b50909695505050505050565b90815260200190565b606081016101ea828461047a565b60405181810167ffffffffffffffff8111828210171561054d57fe5b60405291905056fea164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getReferenceData(string,string)": {
        "notice": "Returns the price data for the given base/quote pair. Revert if not available."
      },
      "getReferenceDataBulk(string[],string[])": {
        "notice": "Similar to getReferenceData, but with multiple base/quote pairs at once."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9455,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "testRate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9457,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedANT",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 9459,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 9461,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedBUSD",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}