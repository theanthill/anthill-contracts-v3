{
  "address": "0x0A28562814Ace056D78bd1352d52Cc6774d32388",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_base",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "name": "getReferenceData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedQuote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStdReference.ReferenceData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "_bases",
          "type": "string[]"
        },
        {
          "internalType": "string[]",
          "name": "_quotes",
          "type": "string[]"
        }
      ],
      "name": "getReferenceDataBulk",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedBase",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdatedQuote",
              "type": "uint256"
            }
          ],
          "internalType": "struct IStdReference.ReferenceData[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setTestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x02b10a09518d5377b7c224a2860f67d483a8d40d1e9f926f1c9a74a1d663d2a6",
  "receipt": {
    "to": null,
    "from": "0xc892cfd3e75Cf428BDD25576e9a42D515697B2C7",
    "contractAddress": "0x0A28562814Ace056D78bd1352d52Cc6774d32388",
    "transactionIndex": 0,
    "gasUsed": "404247",
    "logsBloom": "0x
    "blockHash": "0x7b67f84cf58495bcddae660d86839fc2525f6dc269509e8b99b8090377433feb",
    "transactionHash": "0x02b10a09518d5377b7c224a2860f67d483a8d40d1e9f926f1c9a74a1d663d2a6",
    "logs": [],
    "blockNumber": 9286101,
    "cumulativeGasUsed": "404247",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "7e43bdcff6e907c345057c88f4245ad4",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_base\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"name\":\"getReferenceData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"_bases\",\"type\":\"string[]\"},{\"internalType\":\"string[]\",\"name\":\"_quotes\",\"type\":\"string[]\"}],\"name\":\"getReferenceDataBulk\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedBase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdatedQuote\",\"type\":\"uint256\"}],\"internalType\":\"struct IStdReference.ReferenceData[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setTestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getReferenceData(string,string)\":{\"notice\":\"Returns the price data for the given base/quote pair. Revert if not available.\"},\"getReferenceDataBulk(string[],string[])\":{\"notice\":\"Similar to getReferenceData, but with multiple base/quote pairs at once.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/MockStdReference.sol\":\"MockStdReference\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/interfaces/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0x648d70a273f88c5ca7718f3d35aad3938e2bb8143817d3c98303235499f98049\",\"license\":\"MIT\"},\"contracts/test/MockStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"../interfaces/IStdReference.sol\\\";\\n\\ncontract MockStdReference is IStdReference {\\n    uint256 testRate = 1e18;\\n\\n    bytes32 encodedANT;\\n    bytes32 encodedBNB;\\n    bytes32 encodedBUSD;\\n\\n    constructor() {\\n        encodedANT = keccak256(abi.encodePacked(\\\"ANT\\\"));\\n        encodedBNB = keccak256(abi.encodePacked(\\\"BNB\\\"));\\n        encodedBUSD = keccak256(abi.encodePacked(\\\"BUSD\\\"));\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(\\n        string memory _base,\\n        string memory /*_quote*/\\n    ) public view override returns (ReferenceData memory) {\\n        ReferenceData memory data;\\n\\n        bytes32 encodedBase = keccak256(abi.encodePacked(_base));\\n\\n        if (encodedBase == encodedANT) {\\n            data.rate = testRate;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else if (encodedBase == encodedBNB) {\\n            data.rate = 300 * 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else if (encodedBase == encodedBUSD) {\\n            data.rate = 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        } else {\\n            data.rate = 1e18;\\n            data.lastUpdatedBase = 0;\\n            data.lastUpdatedQuote = 0;\\n        }\\n\\n        return data;\\n    }\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        override\\n        returns (ReferenceData[] memory)\\n    {\\n        ReferenceData[] memory data = new ReferenceData[](_bases.length);\\n\\n        for (uint256 i = 0; i < data.length; ++i) {\\n            data[i] = getReferenceData(_bases[i], _quotes[i]);\\n        }\\n\\n        return data;\\n    }\\n\\n    function setTestRate(uint256 rate) external {\\n        testRate = rate;\\n    }\\n}\\n\",\"keccak256\":\"0x972e55d6ff9f36153a7542cf63b7d64ee2fbc64e077179b7f2a77101222ddac9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052670de0b6b3a764000060005534801561001c57600080fd5b5060405160200161002c906100b7565b60408051601f198184030181529082905280516020918201206001556100529101610098565b60408051601f1981840301815290829052805160209182012060025561007891016100a7565b60408051601f1981840301815291905280516020909101206003556100c6565b6221272160e91b815260030190565b63109554d160e21b815260040190565b6210539560ea1b815260030190565b6104d8806100d56000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806365555bcc14610046578063beb462d91461006f578063e42a071b14610084575b600080fd5b61005961005436600461038a565b6100a4565b6040516100669190610499565b60405180910390f35b61008261007d3660046103e1565b610175565b005b610097610092366004610329565b61017a565b604051610066919061044b565b6100ac61022e565b6100b461022e565b6000846040516020016100c79190610412565b6040516020818303038152906040528051906020012090506001548114156101005760008054835260208301819052604083015261016b565b60025481141561012957681043561a88293000008252600060208301819052604083015261016b565b60035481141561015157670de0b6b3a76400008252600060208301819052604083015261016b565b670de0b6b3a7640000825260006020830181905260408301525b5090505b92915050565b600055565b60606000835167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101d057816020015b6101bd61022e565b8152602001906001900390816101b55790505b50905060005b815181101561016b5761020f8582815181106101ee57fe5b602002602001015185838151811061020257fe5b60200260200101516100a4565b82828151811061021b57fe5b60209081029190910101526001016101d6565b60405180606001604052806000815260200160008152602001600081525090565b600082601f83011261025f578081fd5b8135602067ffffffffffffffff82111561027557fe5b61028281828402016104a7565b82815281810190858301855b858110156102b7576102a5898684358b01016102c4565b8452928401929084019060010161028e565b5090979650505050505050565b600082601f8301126102d4578081fd5b813567ffffffffffffffff8111156102e857fe5b6102fb601f8201601f19166020016104a7565b81815284602083860101111561030f578283fd5b816020850160208301379081016020019190915292915050565b6000806040838503121561033b578182fd5b823567ffffffffffffffff80821115610352578384fd5b61035e8683870161024f565b93506020850135915080821115610373578283fd5b506103808582860161024f565b9150509250929050565b6000806040838503121561039c578182fd5b823567ffffffffffffffff808211156103b3578384fd5b6103bf868387016102c4565b935060208501359150808211156103d4578283fd5b50610380858286016102c4565b6000602082840312156103f2578081fd5b5035919050565b8051825260208082015190830152604090810151910152565b60008251815b818110156104325760208186018101518583015201610418565b818111156104405782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561048d5761047a8385516103f9565b9284019260609290920191600101610467565b50909695505050505050565b6060810161016f82846103f9565b60405181810167ffffffffffffffff811182821017156104c357fe5b60405291905056fea164736f6c6343000706000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806365555bcc14610046578063beb462d91461006f578063e42a071b14610084575b600080fd5b61005961005436600461038a565b6100a4565b6040516100669190610499565b60405180910390f35b61008261007d3660046103e1565b610175565b005b610097610092366004610329565b61017a565b604051610066919061044b565b6100ac61022e565b6100b461022e565b6000846040516020016100c79190610412565b6040516020818303038152906040528051906020012090506001548114156101005760008054835260208301819052604083015261016b565b60025481141561012957681043561a88293000008252600060208301819052604083015261016b565b60035481141561015157670de0b6b3a76400008252600060208301819052604083015261016b565b670de0b6b3a7640000825260006020830181905260408301525b5090505b92915050565b600055565b60606000835167ffffffffffffffff8111801561019657600080fd5b506040519080825280602002602001820160405280156101d057816020015b6101bd61022e565b8152602001906001900390816101b55790505b50905060005b815181101561016b5761020f8582815181106101ee57fe5b602002602001015185838151811061020257fe5b60200260200101516100a4565b82828151811061021b57fe5b60209081029190910101526001016101d6565b60405180606001604052806000815260200160008152602001600081525090565b600082601f83011261025f578081fd5b8135602067ffffffffffffffff82111561027557fe5b61028281828402016104a7565b82815281810190858301855b858110156102b7576102a5898684358b01016102c4565b8452928401929084019060010161028e565b5090979650505050505050565b600082601f8301126102d4578081fd5b813567ffffffffffffffff8111156102e857fe5b6102fb601f8201601f19166020016104a7565b81815284602083860101111561030f578283fd5b816020850160208301379081016020019190915292915050565b6000806040838503121561033b578182fd5b823567ffffffffffffffff80821115610352578384fd5b61035e8683870161024f565b93506020850135915080821115610373578283fd5b506103808582860161024f565b9150509250929050565b6000806040838503121561039c578182fd5b823567ffffffffffffffff808211156103b3578384fd5b6103bf868387016102c4565b935060208501359150808211156103d4578283fd5b50610380858286016102c4565b6000602082840312156103f2578081fd5b5035919050565b8051825260208082015190830152604090810151910152565b60008251815b818110156104325760208186018101518583015201610418565b818111156104405782828501525b509190910192915050565b6020808252825182820181905260009190848201906040850190845b8181101561048d5761047a8385516103f9565b9284019260609290920191600101610467565b50909695505050505050565b6060810161016f82846103f9565b60405181810167ffffffffffffffff811182821017156104c357fe5b60405291905056fea164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getReferenceData(string,string)": {
        "notice": "Returns the price data for the given base/quote pair. Revert if not available."
      },
      "getReferenceDataBulk(string[],string[])": {
        "notice": "Similar to getReferenceData, but with multiple base/quote pairs at once."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 9455,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "testRate",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 9457,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedANT",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 9459,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedBNB",
        "offset": 0,
        "slot": "2",
        "type": "t_bytes32"
      },
      {
        "astId": 9461,
        "contract": "contracts/test/MockStdReference.sol:MockStdReference",
        "label": "encodedBUSD",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}