{
    "address": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "_antToken",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_antBond",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_antShare",
                    "type": "address"
                },
                {
                    "internalType": "contract IOracle",
                    "name": "_oracle",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_boardroom",
                    "type": "address"
                },
                {
                    "internalType": "address",
                    "name": "_fund",
                    "type": "address"
                },
                {
                    "internalType": "uint256",
                    "name": "_startTime",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "_period",
                    "type": "uint256"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "seigniorage",
                    "type": "uint256"
                }
            ],
            "name": "BoardroomFunded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "BoughtAntBonds",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "address",
                    "name": "newFund",
                    "type": "address"
                }
            ],
            "name": "ContributionPoolChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "seigniorage",
                    "type": "uint256"
                }
            ],
            "name": "ContributionPoolFunded",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "operator",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "newRate",
                    "type": "uint256"
                }
            ],
            "name": "ContributionPoolRateChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                }
            ],
            "name": "Migration",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "from",
                    "type": "address"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "amount",
                    "type": "uint256"
                }
            ],
            "name": "RedeemedAntBonds",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "previousAdminRole",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "newAdminRole",
                    "type": "bytes32"
                }
            ],
            "name": "RoleAdminChanged",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleGranted",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": true,
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                },
                {
                    "indexed": true,
                    "internalType": "address",
                    "name": "sender",
                    "type": "address"
                }
            ],
            "name": "RoleRevoked",
            "type": "event"
        },
        {
            "anonymous": false,
            "inputs": [
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "timestamp",
                    "type": "uint256"
                },
                {
                    "indexed": false,
                    "internalType": "uint256",
                    "name": "seigniorage",
                    "type": "uint256"
                }
            ],
            "name": "TreasuryFunded",
            "type": "event"
        },
        {
            "inputs": [],
            "name": "ADMIN_ACCESS_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "DEFAULT_ADMIN_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "OPERATOR_ROLE",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "allocateSeigniorage",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "antBond",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "antShare",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "antToken",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "boardroom",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amountAntToken",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "targetPrice",
                    "type": "uint256"
                }
            ],
            "name": "buyAntBonds",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fundAllocationRate",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getCurrentEpoch",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPeriod",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getReserve",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleAdmin",
            "outputs": [
                {
                    "internalType": "bytes32",
                    "name": "",
                    "type": "bytes32"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getRoleMember",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                }
            ],
            "name": "getRoleMemberCount",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "grantRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "hasRole",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "initialized",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isAdmin",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "isOperator",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "target",
                    "type": "address"
                }
            ],
            "name": "migrate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "migrated",
            "outputs": [
                {
                    "internalType": "bool",
                    "name": "",
                    "type": "bool"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "nextEpochPoint",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "oracle",
            "outputs": [
                {
                    "internalType": "contract IOracle",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "priceDollar",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "amountAntBonds",
                    "type": "uint256"
                },
                {
                    "internalType": "uint256",
                    "name": "targetPrice",
                    "type": "uint256"
                }
            ],
            "name": "redeemAntBonds",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "renounceRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "bytes32",
                    "name": "role",
                    "type": "bytes32"
                },
                {
                    "internalType": "address",
                    "name": "account",
                    "type": "address"
                }
            ],
            "name": "revokeRole",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newFund",
                    "type": "address"
                }
            ],
            "name": "setFund",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "rate",
                    "type": "uint256"
                }
            ],
            "name": "setFundAllocationRate",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "period",
                    "type": "uint256"
                }
            ],
            "name": "setPeriod",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "startTime",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "tokenPriceCeiling",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "tokenPriceTWAP",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newAdmin",
                    "type": "address"
                }
            ],
            "name": "transferAdmin",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "newOperator",
                    "type": "address"
                }
            ],
            "name": "transferOperator",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        }
    ],
    "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
    "receipt": {
        "to": null,
        "from": "0xc892cfd3e75Cf428BDD25576e9a42D515697B2C7",
        "contractAddress": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
        "transactionIndex": 0,
        "gasUsed": "3594393",
        "logsBloom": "0x
        "blockHash": "0xca201917459a984fefc23a3a68749445d145c2554fb1b9ed3b439f5708f3fe21",
        "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
        "logs": [
            {
                "transactionIndex": 0,
                "blockNumber": 9286111,
                "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
                "address": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
                "topics": [
                    "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
                    "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
                ],
                "data": "0x",
                "logIndex": 0,
                "blockHash": "0xca201917459a984fefc23a3a68749445d145c2554fb1b9ed3b439f5708f3fe21"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 9286111,
                "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
                "address": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
                    "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7",
                    "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7"
                ],
                "data": "0x",
                "logIndex": 1,
                "blockHash": "0xca201917459a984fefc23a3a68749445d145c2554fb1b9ed3b439f5708f3fe21"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 9286111,
                "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
                "address": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
                "topics": [
                    "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
                    "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
                    "0x0000000000000000000000000000000000000000000000000000000000000000",
                    "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
                ],
                "data": "0x",
                "logIndex": 2,
                "blockHash": "0xca201917459a984fefc23a3a68749445d145c2554fb1b9ed3b439f5708f3fe21"
            },
            {
                "transactionIndex": 0,
                "blockNumber": 9286111,
                "transactionHash": "0xb56faaa7b1069d6faca8a546c86f4288fd819cf5bfc8769a1ffa3a738de47e7d",
                "address": "0xE92a71962773ec611713d775D1Ee47F3d2DF9d19",
                "topics": [
                    "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
                    "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
                    "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7",
                    "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7"
                ],
                "data": "0x",
                "logIndex": 3,
                "blockHash": "0xca201917459a984fefc23a3a68749445d145c2554fb1b9ed3b439f5708f3fe21"
            }
        ],
        "blockNumber": 9286111,
        "cumulativeGasUsed": "3594393",
        "status": 1,
        "byzantium": true
    },
    "args": [
        "0x8fae44D3A61FE646DF2244839822939E8147431b",
        "0x44b893e21922134e94f1745878F0a3aa8e133bd4",
        "0xC5c78965eaeb0eFc402349A533f97C232C8DFBb8",
        "0x94a181d3498b37BF958dF0a10eEc5111cB063Ecd",
        "0xc306CE1067277f2F7606A84EbDe82969fF5BD2D6",
        "0x1BE0B66B483F705DD5f6721B3cCd2792787Ed83A",
        1619777245,
        600
    ],
    "solcInputHash": "7e43bdcff6e907c345057c88f4245ad4",
    "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_antToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antBond\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_antShare\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_boardroom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_fund\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_period\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"BoardroomFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BoughtAntBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"ContributionPoolChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"ContributionPoolFunded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRate\",\"type\":\"uint256\"}],\"name\":\"ContributionPoolRateChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"Migration\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RedeemedAntBonds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seigniorage\",\"type\":\"uint256\"}],\"name\":\"TreasuryFunded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ACCESS_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antBond\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antShare\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"antToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"boardroom\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAntToken\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"buyAntBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fundAllocationRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpoch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextEpochPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceDollar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountAntBonds\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"targetPrice\",\"type\":\"uint256\"}],\"name\":\"redeemAntBonds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newFund\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setFundAllocationRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"period\",\"type\":\"uint256\"}],\"name\":\"setPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceCeiling\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenPriceTWAP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"buyAntBonds(uint256,uint256)\":{\"params\":{\"amountAntToken\":\"Amount of Ant Tokens to burn in order to get the bonds\",\"targetPrice\":\"Target price at which the bonds will be purchased\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"redeemAntBonds(uint256,uint256)\":{\"params\":{\"amountAntBonds\":\"Amount of Ant Tokens to burn in order to get the bonds\",\"targetPrice\":\"Target price at which the bonds will be redeemed\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"tokenPriceCeiling()\":{\"returns\":{\"_0\":\"The ceiling price multiplied by 1e18\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"allocateSeigniorage()\":{\"notice\":\"Calculates how many new Ant Tokens must be minted to bring the price down to the target price: - If the price is lower than the price celing (target price * 1.05) it does nothing - Fetches the price variation percentage and multiplies the current total supply minus the Treasury allocated tokens by the percentage to obtain the new extra supply to mint - From the new supply a 2% is removed for the Contribution Pool - The Treasury itself gets an amount calculated from the minimum of the new supply and the circulating bonds minus the Treasury current accumulated Seigniorage - Finally the Boardroom gets the rest of the new supply\"},\"buyAntBonds(uint256,uint256)\":{\"notice\":\"Buys Ant Bonds with Ant Tokens Ant Tokens are burned and Ant Bonds are minted to the sender's account in a ratio of 1:(targetPrice/externalPrice)\"},\"redeemAntBonds(uint256,uint256)\":{\"notice\":\"Redeems Ant Bonds for Ant Tokens Ant Bonds are burned and Ant Tokens are transferred to the sender's account in a ratio of 1:1\"},\"tokenPriceCeiling()\":{\"notice\":\"Calculates the ceiling for the token price. This is a 5% more on the actual externally evaluated price of the token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Treasury.sol\":\"Treasury\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x363bd3b45201f07c9b71c2edc96533468cf14a3d029fabd82fddceb1eb3ebd9c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint256;\\n\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n    uint8 private _decimals;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}, initializes {decimals} with\\n     * a default value of 18.\\n     *\\n     * To select a different value for {decimals}, use {_setupDecimals}.\\n     *\\n     * All three of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_) public {\\n        _name = name_;\\n        _symbol = symbol_;\\n        _decimals = 18;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless {_setupDecimals} is\\n     * called.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \\\"ERC20: transfer amount exceeds allowance\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \\\"ERC20: decreased allowance below zero\\\"));\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        _balances[sender] = _balances[sender].sub(amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[recipient] = _balances[recipient].add(amount);\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[account] = _balances[account].add(amount);\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        _balances[account] = _balances[account].sub(amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _totalSupply = _totalSupply.sub(amount);\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Sets {decimals} to a value other than the default one of 18.\\n     *\\n     * WARNING: This function should only be called from the constructor. Most\\n     * applications that interact with token contracts will not expect\\n     * {decimals} to ever change, and may work incorrectly if it does.\\n     */\\n    function _setupDecimals(uint8 decimals_) internal virtual {\\n        _decimals = decimals_;\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xca0c2396dbeb3503b51abf4248ebf77a1461edad513c01529df51850a012bee3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    using SafeMath for uint256;\\n\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \\\"ERC20: burn amount exceeds allowance\\\");\\n\\n        _approve(account, _msgSender(), decreasedAllowance);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x9c0eb3b0e11d2480d49991dc384f1e5f9c9b9967cc81944d50916a9b9c6c4984\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\nimport './pool/IUniswapV3PoolImmutables.sol';\\nimport './pool/IUniswapV3PoolState.sol';\\nimport './pool/IUniswapV3PoolDerivedState.sol';\\nimport './pool/IUniswapV3PoolActions.sol';\\nimport './pool/IUniswapV3PoolOwnerActions.sol';\\nimport './pool/IUniswapV3PoolEvents.sol';\\n\\n/// @title The interface for a Uniswap V3 Pool\\n/// @notice A Uniswap pool facilitates swapping and automated market making between any two assets that strictly conform\\n/// to the ERC20 specification\\n/// @dev The pool interface is broken up into many smaller pieces\\ninterface IUniswapV3Pool is\\n    IUniswapV3PoolImmutables,\\n    IUniswapV3PoolState,\\n    IUniswapV3PoolDerivedState,\\n    IUniswapV3PoolActions,\\n    IUniswapV3PoolOwnerActions,\\n    IUniswapV3PoolEvents\\n{\\n\\n}\\n\",\"keccak256\":\"0xfe6113d518466cd6652c85b111e01f33eb62157f49ae5ed7d5a3947a2044adb1\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissionless pool actions\\n/// @notice Contains pool methods that can be called by anyone\\ninterface IUniswapV3PoolActions {\\n    /// @notice Sets the initial price for the pool\\n    /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\n    /// @param sqrtPriceX96 the initial sqrt price of the pool as a Q64.96\\n    function initialize(uint160 sqrtPriceX96) external;\\n\\n    /// @notice Adds liquidity for the given recipient/tickLower/tickUpper position\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3MintCallback#uniswapV3MintCallback\\n    /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\n    /// on tickLower, tickUpper, the amount of liquidity, and the current price.\\n    /// @param recipient The address for which the liquidity will be created\\n    /// @param tickLower The lower tick of the position in which to add liquidity\\n    /// @param tickUpper The upper tick of the position in which to add liquidity\\n    /// @param amount The amount of liquidity to mint\\n    /// @param data Any data that should be passed through to the callback\\n    /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\n    function mint(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount,\\n        bytes calldata data\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Collects tokens owed to a position\\n    /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\n    /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\n    /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\n    /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\n    /// @param recipient The address which should receive the fees collected\\n    /// @param tickLower The lower tick of the position for which to collect fees\\n    /// @param tickUpper The upper tick of the position for which to collect fees\\n    /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\n    /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\n    /// @return amount0 The amount of fees collected in token0\\n    /// @return amount1 The amount of fees collected in token1\\n    function collect(\\n        address recipient,\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n\\n    /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\n    /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\n    /// @dev Fees must be collected separately via a call to #collect\\n    /// @param tickLower The lower tick of the position for which to burn liquidity\\n    /// @param tickUpper The upper tick of the position for which to burn liquidity\\n    /// @param amount How much liquidity to burn\\n    /// @return amount0 The amount of token0 sent to the recipient\\n    /// @return amount1 The amount of token1 sent to the recipient\\n    function burn(\\n        int24 tickLower,\\n        int24 tickUpper,\\n        uint128 amount\\n    ) external returns (uint256 amount0, uint256 amount1);\\n\\n    /// @notice Swap token0 for token1, or token1 for token0\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback\\n    /// @param recipient The address to receive the output of the swap\\n    /// @param zeroForOne The direction of the swap, true for token0 to token1, false for token1 to token0\\n    /// @param amountSpecified The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\n    /// @param sqrtPriceLimitX96 The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\n    /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\n    /// @param data Any data to be passed through to the callback\\n    /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\n    /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\n    function swap(\\n        address recipient,\\n        bool zeroForOne,\\n        int256 amountSpecified,\\n        uint160 sqrtPriceLimitX96,\\n        bytes calldata data\\n    ) external returns (int256 amount0, int256 amount1);\\n\\n    /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\n    /// @dev The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallback\\n    /// @dev Can be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling\\n    /// with 0 amount{0,1} and sending the donation amount(s) from the callback\\n    /// @param recipient The address which will receive the token0 and token1 amounts\\n    /// @param amount0 The amount of token0 to send\\n    /// @param amount1 The amount of token1 to send\\n    /// @param data Any data to be passed through to the callback\\n    function flash(\\n        address recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        bytes calldata data\\n    ) external;\\n\\n    /// @notice Increase the maximum number of price and liquidity observations that this pool will store\\n    /// @dev This method is no-op if the pool already has an observationCardinalityNext greater than or equal to\\n    /// the input observationCardinalityNext.\\n    /// @param observationCardinalityNext The desired minimum number of observations for the pool to store\\n    function increaseObservationCardinalityNext(uint16 observationCardinalityNext) external;\\n}\\n\",\"keccak256\":\"0x9453dd0e7442188667d01d9b65de3f1e14e9511ff3e303179a15f6fc267f7634\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that is not stored\\n/// @notice Contains view functions to provide information about the pool that is computed rather than stored on the\\n/// blockchain. The functions here may have variable gas costs.\\ninterface IUniswapV3PoolDerivedState {\\n    /// @notice Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp\\n    /// @dev To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing\\n    /// the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick,\\n    /// you must call it with secondsAgos = [3600, 0].\\n    /// @dev The time weighted average tick represents the geometric time weighted average price of the pool, in\\n    /// log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.\\n    /// @param secondsAgos From how long ago each cumulative tick and liquidity value should be returned\\n    /// @return tickCumulatives Cumulative tick values as of each `secondsAgos` from the current block timestamp\\n    /// @return secondsPerLiquidityCumulativeX128s Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block\\n    /// timestamp\\n    function observe(uint32[] calldata secondsAgos)\\n        external\\n        view\\n        returns (int56[] memory tickCumulatives, uint160[] memory secondsPerLiquidityCumulativeX128s);\\n\\n    /// @notice Returns a snapshot of the tick cumulative, seconds per liquidity and seconds inside a tick range\\n    /// @dev Snapshots must only be compared to other snapshots, taken over a period for which a position existed.\\n    /// I.e., snapshots cannot be compared if a position is not held for the entire period between when the first\\n    /// snapshot is taken and the second snapshot is taken.\\n    /// @param tickLower The lower tick of the range\\n    /// @param tickUpper The upper tick of the range\\n    /// @return tickCumulativeInside The snapshot of the tick accumulator for the range\\n    /// @return secondsPerLiquidityInsideX128 The snapshot of seconds per liquidity for the range\\n    /// @return secondsInside The snapshot of seconds per liquidity for the range\\n    function snapshotCumulativesInside(int24 tickLower, int24 tickUpper)\\n        external\\n        view\\n        returns (\\n            int56 tickCumulativeInside,\\n            uint160 secondsPerLiquidityInsideX128,\\n            uint32 secondsInside\\n        );\\n}\\n\",\"keccak256\":\"0xe603ac5b17ecdee73ba2b27efdf386c257a19c14206e87eee77e2017b742d9e5\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Events emitted by a pool\\n/// @notice Contains all events emitted by the pool\\ninterface IUniswapV3PoolEvents {\\n    /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\n    /// @dev Mint/Burn/Swap cannot be emitted by the pool before Initialize\\n    /// @param sqrtPriceX96 The initial sqrt price of the pool, as a Q64.96\\n    /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\n    event Initialize(uint160 sqrtPriceX96, int24 tick);\\n\\n    /// @notice Emitted when liquidity is minted for a given position\\n    /// @param sender The address that minted the liquidity\\n    /// @param owner The owner of the position and recipient of any minted liquidity\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity minted to the position range\\n    /// @param amount0 How much token0 was required for the minted liquidity\\n    /// @param amount1 How much token1 was required for the minted liquidity\\n    event Mint(\\n        address sender,\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted when fees are collected by the owner of a position\\n    /// @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees\\n    /// @param owner The owner of the position for which fees are collected\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount0 The amount of token0 fees collected\\n    /// @param amount1 The amount of token1 fees collected\\n    event Collect(\\n        address indexed owner,\\n        address recipient,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount0,\\n        uint128 amount1\\n    );\\n\\n    /// @notice Emitted when a position's liquidity is removed\\n    /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\n    /// @param owner The owner of the position for which liquidity is removed\\n    /// @param tickLower The lower tick of the position\\n    /// @param tickUpper The upper tick of the position\\n    /// @param amount The amount of liquidity to remove\\n    /// @param amount0 The amount of token0 withdrawn\\n    /// @param amount1 The amount of token1 withdrawn\\n    event Burn(\\n        address indexed owner,\\n        int24 indexed tickLower,\\n        int24 indexed tickUpper,\\n        uint128 amount,\\n        uint256 amount0,\\n        uint256 amount1\\n    );\\n\\n    /// @notice Emitted by the pool for any swaps between token0 and token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the output of the swap\\n    /// @param amount0 The delta of the token0 balance of the pool\\n    /// @param amount1 The delta of the token1 balance of the pool\\n    /// @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96\\n    /// @param liquidity The liquidity of the pool after the swap\\n    /// @param tick The log base 1.0001 of price of the pool after the swap\\n    event Swap(\\n        address indexed sender,\\n        address indexed recipient,\\n        int256 amount0,\\n        int256 amount1,\\n        uint160 sqrtPriceX96,\\n        uint128 liquidity,\\n        int24 tick\\n    );\\n\\n    /// @notice Emitted by the pool for any flashes of token0/token1\\n    /// @param sender The address that initiated the swap call, and that received the callback\\n    /// @param recipient The address that received the tokens from flash\\n    /// @param amount0 The amount of token0 that was flashed\\n    /// @param amount1 The amount of token1 that was flashed\\n    /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\n    /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\n    event Flash(\\n        address indexed sender,\\n        address indexed recipient,\\n        uint256 amount0,\\n        uint256 amount1,\\n        uint256 paid0,\\n        uint256 paid1\\n    );\\n\\n    /// @notice Emitted by the pool for increases to the number of observations that can be stored\\n    /// @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index\\n    /// just before a mint/swap/burn.\\n    /// @param observationCardinalityNextOld The previous value of the next observation cardinality\\n    /// @param observationCardinalityNextNew The updated value of the next observation cardinality\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    /// @notice Emitted when the protocol fee is changed by the pool\\n    /// @param feeProtocol0Old The previous value of the token0 protocol fee\\n    /// @param feeProtocol1Old The previous value of the token1 protocol fee\\n    /// @param feeProtocol0New The updated value of the token0 protocol fee\\n    /// @param feeProtocol1New The updated value of the token1 protocol fee\\n    event SetFeeProtocol(uint8 feeProtocol0Old, uint8 feeProtocol1Old, uint8 feeProtocol0New, uint8 feeProtocol1New);\\n\\n    /// @notice Emitted when the collected protocol fees are withdrawn by the factory owner\\n    /// @param sender The address that collects the protocol fees\\n    /// @param recipient The address that receives the collected protocol fees\\n    /// @param amount0 The amount of token0 protocol fees that is withdrawn\\n    /// @param amount0 The amount of token1 protocol fees that is withdrawn\\n    event CollectProtocol(address indexed sender, address indexed recipient, uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x8071514d0fe5d17d6fbd31c191cdfb703031c24e0ece3621d88ab10e871375cd\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that never changes\\n/// @notice These parameters are fixed for a pool forever, i.e., the methods will always return the same values\\ninterface IUniswapV3PoolImmutables {\\n    /// @notice The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface\\n    /// @return The contract address\\n    function factory() external view returns (address);\\n\\n    /// @notice The first of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token0() external view returns (address);\\n\\n    /// @notice The second of the two tokens of the pool, sorted by address\\n    /// @return The token contract address\\n    function token1() external view returns (address);\\n\\n    /// @notice The pool's fee in hundredths of a bip, i.e. 1e-6\\n    /// @return The fee\\n    function fee() external view returns (uint24);\\n\\n    /// @notice The pool tick spacing\\n    /// @dev Ticks can only be used at multiples of this value, minimum of 1 and always positive\\n    /// e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ...\\n    /// This value is an int24 to avoid casting even though it is always positive.\\n    /// @return The tick spacing\\n    function tickSpacing() external view returns (int24);\\n\\n    /// @notice The maximum amount of position liquidity that can use any tick in the range\\n    /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\n    /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\n    /// @return The max amount of liquidity per tick\\n    function maxLiquidityPerTick() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xf6e5d2cd1139c4c276bdbc8e1d2b256e456c866a91f1b868da265c6d2685c3f7\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Permissioned pool actions\\n/// @notice Contains pool methods that may only be called by the factory owner\\ninterface IUniswapV3PoolOwnerActions {\\n    /// @notice Set the denominator of the protocol's % share of the fees\\n    /// @param feeProtocol0 new protocol fee for token0 of the pool\\n    /// @param feeProtocol1 new protocol fee for token1 of the pool\\n    function setFeeProtocol(uint8 feeProtocol0, uint8 feeProtocol1) external;\\n\\n    /// @notice Collect the protocol fee accrued to the pool\\n    /// @param recipient The address to which collected protocol fees should be sent\\n    /// @param amount0Requested The maximum amount of token0 to send, can be 0 to collect fees in only token1\\n    /// @param amount1Requested The maximum amount of token1 to send, can be 0 to collect fees in only token0\\n    /// @return amount0 The protocol fee collected in token0\\n    /// @return amount1 The protocol fee collected in token1\\n    function collectProtocol(\\n        address recipient,\\n        uint128 amount0Requested,\\n        uint128 amount1Requested\\n    ) external returns (uint128 amount0, uint128 amount1);\\n}\\n\",\"keccak256\":\"0x759b78a2918af9e99e246dc3af084f654e48ef32bb4e4cb8a966aa3dcaece235\",\"license\":\"GPL-2.0-or-later\"},\"@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity >=0.5.0;\\n\\n/// @title Pool state that can change\\n/// @notice These methods compose the pool's state, and can change with any frequency including multiple times\\n/// per transaction\\ninterface IUniswapV3PoolState {\\n    /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\n    /// when accessed externally.\\n    /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\n    /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\n    /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\n    /// boundary.\\n    /// observationIndex The index of the last oracle observation that was written,\\n    /// observationCardinality The current maximum number of observations stored in the pool,\\n    /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\n    /// feeProtocol The protocol fee for both tokens of the pool.\\n    /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\n    /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\n    /// unlocked Whether the pool is currently locked to reentrancy\\n    function slot0()\\n        external\\n        view\\n        returns (\\n            uint160 sqrtPriceX96,\\n            int24 tick,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext,\\n            uint8 feeProtocol,\\n            bool unlocked\\n        );\\n\\n    /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal0X128() external view returns (uint256);\\n\\n    /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\n    /// @dev This value can overflow the uint256\\n    function feeGrowthGlobal1X128() external view returns (uint256);\\n\\n    /// @notice The amounts of token0 and token1 that are owed to the protocol\\n    /// @dev Protocol fees will never exceed uint128 max in either token\\n    function protocolFees() external view returns (uint128 token0, uint128 token1);\\n\\n    /// @notice The currently in range liquidity available to the pool\\n    /// @dev This value has no relationship to the total liquidity across all ticks\\n    function liquidity() external view returns (uint128);\\n\\n    /// @notice Look up information about a specific tick in the pool\\n    /// @param tick The tick to look up\\n    /// @return liquidityGross the total amount of position liquidity that uses the pool either as tick lower or\\n    /// tick upper,\\n    /// liquidityNet how much liquidity changes when the pool price crosses the tick,\\n    /// feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0,\\n    /// feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1,\\n    /// tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick\\n    /// secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick,\\n    /// secondsOutside the seconds spent on the other side of the tick from the current tick,\\n    /// initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false.\\n    /// Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0.\\n    /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\n    /// a specific position.\\n    function ticks(int24 tick)\\n        external\\n        view\\n        returns (\\n            uint128 liquidityGross,\\n            int128 liquidityNet,\\n            uint256 feeGrowthOutside0X128,\\n            uint256 feeGrowthOutside1X128,\\n            int56 tickCumulativeOutside,\\n            uint160 secondsPerLiquidityOutsideX128,\\n            uint32 secondsOutside,\\n            bool initialized\\n        );\\n\\n    /// @notice Returns 256 packed tick initialized boolean values. See TickBitmap for more information\\n    function tickBitmap(int16 wordPosition) external view returns (uint256);\\n\\n    /// @notice Returns the information about a position by the position's key\\n    /// @param key The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper\\n    /// @return _liquidity The amount of liquidity in the position,\\n    /// Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke,\\n    /// Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke,\\n    /// Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke,\\n    /// Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke\\n    function positions(bytes32 key)\\n        external\\n        view\\n        returns (\\n            uint128 _liquidity,\\n            uint256 feeGrowthInside0LastX128,\\n            uint256 feeGrowthInside1LastX128,\\n            uint128 tokensOwed0,\\n            uint128 tokensOwed1\\n        );\\n\\n    /// @notice Returns data about a specific observation index\\n    /// @param index The element of the observations array to fetch\\n    /// @dev You most likely want to use #observe() instead of this method to get an observation as of some amount of time\\n    /// ago, rather than at a specific index in the array.\\n    /// @return blockTimestamp The timestamp of the observation,\\n    /// Returns tickCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp,\\n    /// Returns secondsPerLiquidityCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp,\\n    /// Returns initialized whether the observation has been initialized and the values are safe to use\\n    function observations(uint256 index)\\n        external\\n        view\\n        returns (\\n            uint32 blockTimestamp,\\n            int56 tickCumulative,\\n            uint160 secondsPerLiquidityCumulativeX128,\\n            bool initialized\\n        );\\n}\\n\",\"keccak256\":\"0x852dc1f5df7dcf7f11e7bb3eed79f0cea72ad4b25f6a9d2c35aafb48925fd49f\",\"license\":\"GPL-2.0-or-later\"},\"contracts/access/AdminAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Admin access to certain functions of a contract\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IAdminAccessControl {\\n    function isAdmin(address account) external view returns (bool);\\n\\n    function transferAdmin(address newAdmin) external;\\n}\\n\\n/**\\n    Helper to provide some utils for contracts using an admin role,\\n    like TimelockController\\n */\\nabstract contract AdminAccessControlHelper is AccessControl {\\n    bytes32 public immutable ADMIN_ACCESS_ROLE;\\n\\n    address private _admin;\\n\\n    constructor(bytes32 adminRoleID, address adminAddress) {\\n        ADMIN_ACCESS_ROLE = adminRoleID;\\n\\n        _admin = adminAddress;\\n    }\\n\\n    // ==== MODIFIERS ====\\n    modifier onlyAdmin() {\\n        require(hasRole(ADMIN_ACCESS_ROLE, _msgSender()), \\\"AdminAccessControlHelper: sender requires permission\\\");\\n        _;\\n    }\\n\\n    // ==== VIEWS ====\\n    function isAdmin(address account) external view returns (bool) {\\n        return hasRole(ADMIN_ACCESS_ROLE, account);\\n    }\\n\\n    // ==== MUTABLES ====\\n    function transferAdmin(address newAdmin) external onlyAdmin {\\n        require(newAdmin != address(0), \\\"AdminAccessControlHelper: zero address given for new operator\\\");\\n\\n        grantRole(ADMIN_ACCESS_ROLE, newAdmin);\\n        revokeRole(ADMIN_ACCESS_ROLE, _admin);\\n\\n        _admin = newAdmin;\\n    }\\n}\\n\\n/**\\n    Access control contract with pre-defined admin role\\n */\\nabstract contract AdminAccessControl is AdminAccessControlHelper {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    constructor() AdminAccessControlHelper(ADMIN_ROLE, _msgSender()) {\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n\\n        _setupRole(ADMIN_ROLE, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x5e6d106be41df2e24c8a2aaf494f21f82a6a88a256178895897f58e9ca58d682\",\"license\":\"MIT\"},\"contracts/access/OperatorAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./AdminAccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IOperatorAccessControl {\\n    function isOperator(address account) external view returns (bool);\\n\\n    function transferOperator(address newOperator) external;\\n\\n    function transferAdmin(address newAdmin) external;\\n}\\n\\n/**\\n    Basic access control for a contract that defines an Admin and an Operator roles\\n\\n        - Admin can transfer the Operator to a new account or add new Operator\\n        - Operator can perform calls to all functiones marked as onlyOperator()\\n */\\nabstract contract OperatorAccessControl is AdminAccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address private _operator;\\n\\n    // ==== CONSTRUCTOR ====\\n    constructor() {\\n        _setRoleAdmin(OPERATOR_ROLE, ADMIN_ROLE);\\n\\n        _operator = _msgSender();\\n\\n        _setupRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    // ==== MODIFIERS ====\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, _msgSender()), \\\"OperatorAccessControl: sender requires permission\\\");\\n        _;\\n    }\\n\\n    // ==== VIEWS ====\\n    function isOperator(address account) external view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    // ==== MUTABLES ====\\n    function transferOperator(address newOperator) external onlyAdmin {\\n        require(newOperator != address(0), \\\"OperatorAccessControl: zero address given for new operator\\\");\\n\\n        revokeRole(OPERATOR_ROLE, _operator);\\n\\n        _operator = newOperator;\\n\\n        grantRole(OPERATOR_ROLE, newOperator);\\n    }\\n}\\n\",\"keccak256\":\"0x78a11568c5c5d4dee7b5570a7e739749edcc258645029c71ac3bfcc5a52e9268\",\"license\":\"MIT\"},\"contracts/core/BaseToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Base contract for the tokens in the system\\n\\n    All tokens are burnable and have an operator\\n */\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20Burnable.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IBaseToken {\\n    function mint(address recipient, uint256 amount) external;\\n\\n    function burnFrom(address from, uint256 amount) external;\\n}\\n\\n/**\\n    Base implementation of a ERC20 burnable token with access control for an Operator\\n */\\ncontract BaseToken is ERC20Burnable, OperatorAccessControl {\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(string memory name_, string memory symbol_) ERC20(name_, symbol_) {}\\n\\n    /* ========== MUTABLES ========== */\\n    function mint(address recipient_, uint256 amount_) external onlyOperator {\\n        _mint(recipient_, amount_);\\n    }\\n\\n    function burn(uint256 amount) public override onlyOperator {\\n        super.burn(amount);\\n    }\\n\\n    function burnFrom(address account, uint256 amount) public override onlyOperator {\\n        super.burnFrom(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xf7b716285db12235dd22661b43f5d591dcf7cbb20522d4616cf11007e3b4c63d\",\"license\":\"MIT\"},\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Generic LP Token Pool\\n*/\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n    Interface\\n*/\\ninterface IStakingPool {\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function exit() external returns (uint256);\\n}\\n\\n/**\\n    Contract\\n */\\ncontract StakingPool is Context {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(IERC20 token_) {\\n        token = token_;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n        Returns the total supply of LP tokens staked in the contract\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        Returns the current balance of the given account\\n\\n        @param account Account for which the balance is requested\\n    */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /* ========== MUTABLES ========== */\\n\\n    /**\\n        Staking for the message sender. The caller holds the\\n        LP tokens to be staked\\n\\n        This method can only be called by the contract operator\\n\\n        @param amount Amount of LP tokens to stake\\n    */\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\\n\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    /**\\n        Withdrawal for the message sender The caller will receive the\\n        LP tokens to be withdrawn\\n\\n        This method can only be called by the contract operator\\n        \\n        @param amount Amount of LP tokens to be withdrawn\\n    */\\n    function withdraw(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\\n\\n        token.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n        Exiting for the message sender. It performs a withdraw of all\\n        the staked tokens. The caller will receive the LP tokens to be withdrawn\\n\\n        This method can only be called by the contract operator\\n        \\n        @return The amount of LP tokens withdrawn\\n    */\\n    function exit() public virtual returns (uint256) {\\n        uint256 balance = balanceOf(_msgSender());\\n        withdraw(balance);\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x660bec5c13b1ba5cd077400348e6c7e0d801bee800b9db527bcde892de2c40a7\",\"license\":\"MIT\"},\"contracts/governance/Boardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Boardroom for staking of the _tokenShares and earning rewards during inflationary periods\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\nimport \\\"../utils/ContractGuard.sol\\\";\\nimport \\\"../core/StakingPool.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IBoardroom {\\n    function allocateSeigniorage(uint256 amount) external;\\n}\\n\\n/**\\n    Baordroom contract where the share holders can stake their _token Shares in exchange of\\n    rewards in _token Tokens\\n */\\ncontract Boardroom is StakingPool, OperatorAccessControl, ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Boardseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n    }\\n\\n    struct BoardSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 private _token;\\n\\n    mapping(address => Boardseat) private directors;\\n    BoardSnapshot[] private boardHistory;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(IERC20 token, IERC20 stakingToken) StakingPool(stakingToken) {\\n        _token = token;\\n\\n        BoardSnapshot memory genesisSnapshot = BoardSnapshot({\\n            time: block.number,\\n            rewardReceived: 0,\\n            rewardPerShare: 0\\n        });\\n        boardHistory.push(genesisSnapshot);\\n    }\\n\\n    /* ========== Modifiers =============== */\\n    modifier directorExists {\\n        require(balanceOf(_msgSender()) > 0, \\\"Boardroom: The director does not exist\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address director) {\\n        if (director != address(0)) {\\n            Boardseat memory seat = directors[director];\\n            seat.rewardEarned = earned(director);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            directors[director] = seat;\\n        }\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (BoardSnapshot memory) {\\n        return boardHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address director) public view returns (uint256) {\\n        return directors[director].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address director) internal view returns (BoardSnapshot memory) {\\n        return boardHistory[getLastSnapshotIndexOf(director)];\\n    }\\n\\n    // =========== Director getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address director) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\\n\\n        return balanceOf(director).mul(latestRPS.sub(storedRPS)).div(1e18).add(directors[director].rewardEarned);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function stake(uint256 amount) public override onlyOneBlock updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Boardroom: Cannot stake 0\\\");\\n        super.stake(amount);\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override onlyOneBlock directorExists updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Boardroom: Cannot withdraw 0\\\");\\n        super.withdraw(amount);\\n        emit Withdrawn(_msgSender(), amount);\\n    }\\n\\n    function exit() public override onlyOneBlock directorExists updateReward(_msgSender()) returns (uint256) {\\n        uint256 lpTokensAmount = super.exit();\\n        claimReward();\\n        return lpTokensAmount;\\n    }\\n\\n    function claimReward() public updateReward(_msgSender()) {\\n        uint256 reward = directors[_msgSender()].rewardEarned;\\n        if (reward > 0) {\\n            directors[_msgSender()].rewardEarned = 0;\\n            _token.safeTransfer(_msgSender(), reward);\\n            emit RewardPaid(_msgSender(), reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\\n        require(amount > 0, \\\"Boardroom: Cannot allocate 0\\\");\\n        require(totalSupply() > 0, \\\"Boardroom: Cannot allocate when totalSupply is 0\\\");\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\n\\n        BoardSnapshot memory newSnapshot = BoardSnapshot({\\n            time: block.number,\\n            rewardReceived: amount,\\n            rewardPerShare: nextRPS\\n        });\\n        boardHistory.push(newSnapshot);\\n\\n        _token.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        emit RewardAdded(_msgSender(), amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n}\\n\",\"keccak256\":\"0x23b47aad2d1962298758b019fb670d98cf4acb05177e97168fa48fa559286331\",\"license\":\"MIT\"},\"contracts/governance/ContributionPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Reserve pool that receives a defined percentage of the new minted tokens for each Seigniorage\\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IContributionPool {\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        string memory reason\\n    ) external;\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        string memory reason\\n    ) external;\\n}\\n\\n/**\\n    Simple ERC fund to use as a contribution pool\\n */\\ncontract ContributionPool is IContributionPool, OperatorAccessControl {\\n    using SafeERC20 for IERC20;\\n\\n    function deposit(\\n        address token,\\n        uint256 amount,\\n        string memory reason\\n    ) public override {\\n        IERC20(token).safeTransferFrom(_msgSender(), address(this), amount);\\n        emit Deposit(_msgSender(), block.timestamp, reason);\\n    }\\n\\n    function withdraw(\\n        address token,\\n        uint256 amount,\\n        address to,\\n        string memory reason\\n    ) public override onlyOperator {\\n        IERC20(token).safeTransfer(to, amount);\\n        emit Withdrawal(_msgSender(), to, block.timestamp, reason);\\n    }\\n\\n    event Deposit(address indexed from, uint256 indexed at, string reason);\\n    event Withdrawal(address indexed from, address indexed to, uint256 indexed at, string reason);\\n}\\n\",\"keccak256\":\"0x1e317e8f8e900b7c734ef1678b19fee8b0997bda5d4f565ff0f15a9873756345\",\"license\":\"MIT\"},\"contracts/governance/Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\n/**\\n    Oracle to consult the current price of the token\\n*/\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol\\\";\\n\\n//import \\\"../libraries/PancakeOracleLibrary.sol\\\";\\nimport \\\"../libraries/FixedPoint.sol\\\";\\n\\nimport \\\"../interfaces/IPancakePair.sol\\\";\\nimport \\\"../interfaces/IStdReference.sol\\\";\\n\\nimport \\\"../utils/EpochCounter.sol\\\";\\n\\n/** \\n    Interface\\n */\\ninterface IOracle {\\n    function update() external;\\n\\n    function priceTWAP(address token) external view returns (uint256);\\n\\n    function priceDollar() external view returns (uint256);\\n\\n    function priceVariationPercentage(address token) external view returns (uint256);\\n\\n    function consult(address token, uint256 amountIn) external view returns (uint256);\\n}\\n\\n/**\\n    Fixed window oracle that recomputes the average price for the entire period once every period\\n    note that the price average is only guaranteed to be over at least 1 period, but may be over a longer period\\n */\\ncontract Oracle is IOracle, EpochCounter {\\n    /* ========== STATE ======== */\\n    using SafeMath for uint256;\\n    using FixedPoint for *;\\n\\n    // Constants\\n    string constant EXTERNAL_ORACLE_BASE = \\\"BUSD\\\";\\n    string constant EXTERNAL_ORACLE_QUOTE = \\\"USDC\\\";\\n\\n    // Immutables\\n    IUniswapV3Pool public immutable pool;\\n    address public immutable token0;\\n    address public immutable token1;\\n    IStdReference public immutable bandOracle;\\n\\n    // Latest price from PancakeSwap\\n    uint256 public price0CumulativeLast;\\n    uint256 public price1CumulativeLast;\\n    uint32 public blockTimestampLast;\\n\\n    // TWAP for an epoch period\\n    FixedPoint.uq112x112 public price0Average;\\n    FixedPoint.uq112x112 public price1Average;\\n\\n    constructor(\\n        IUniswapV3Pool _pool,\\n        uint256 _period,\\n        uint256 _startTime,\\n        IStdReference _bandOracle\\n    ) EpochCounter(_period, _startTime, 0) {\\n        pool = _pool;\\n\\n        token0 = _pool.token0();\\n        token1 = _pool.token1();\\n\\n        bandOracle = _bandOracle;\\n\\n        //price0CumulativeLast = _pair.price0CumulativeLast();\\n        //price1CumulativeLast = _pair.price1CumulativeLast();\\n\\n        //(, , blockTimestampLast) = _pair.getReserves();\\n    }\\n\\n    /** \\n        Update the price from PancakeSwap\\n\\n        @dev Updates 1-day EMA price from PancakeSwap\\n    */\\n    function update() external override checkEpoch {\\n        // Obtain the TWAP for the latest block\\n        /*(uint256 price0Cumulative, uint256 price1Cumulative, uint32 blockTimestamp) = PancakeOracleLibrary\\n        .currentCumulativePrices(address(pair));\\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast; // overflow is desired\\n\\n        // overflow is desired, casting never truncates\\n        // cumulative price is in (uq112x112 price * seconds) units so we simply wrap it after division by time elapsed\\n        price0Average = FixedPoint.uq112x112(uint224((price0Cumulative - price0CumulativeLast) / timeElapsed));\\n        price1Average = FixedPoint.uq112x112(uint224((price1Cumulative - price1CumulativeLast) / timeElapsed));\\n\\n        price0CumulativeLast = price0Cumulative;\\n        price1CumulativeLast = price1Cumulative;\\n        blockTimestampLast = blockTimestamp;\\n\\n        emit Updated(price0CumulativeLast, price1CumulativeLast);*/\\n    }\\n\\n    /**\\n        Returns the latest updated average price for the given token\\n\\n        @param token   Address of the token to get the average price for\\n\\n        @return price  Average price of the token multiplied by 1e18\\n    */\\n    function priceTWAP(address token) public view override returns (uint256 price) {\\n        if (token == token0) {\\n            price = price0Average.mul(1e18).decode144();\\n        } else {\\n            require(token == token1, \\\"ExampleOracleSimple: INVALID_TOKEN\\\");\\n            price = price1Average.mul(1e18).decode144();\\n        }\\n    }\\n\\n    /**\\n        Returns the latest known price from the external oracle for the BUSD/USDT pair\\n\\n        @return price  Latest external price of the token multiplied by 1e18\\n    */\\n    function priceDollar() public view override returns (uint256 price) {\\n        price = bandOracle.getReferenceData(EXTERNAL_ORACLE_BASE, EXTERNAL_ORACLE_QUOTE).rate;\\n    }\\n\\n    /**\\n        Calculates the percentage of the price variation between the internal liquidity price\\n        and the external Oracle price\\n\\n        @param token   Address of the token to get price variation for\\n\\n        @return percentage  Price variation percentage multiplied by 1e18\\n    */\\n    function priceVariationPercentage(address token) external view override returns (uint256 percentage) {\\n        percentage = priceTWAP(token).mul(1e18).div(priceDollar()).sub(1e18);\\n    }\\n\\n    function consult(address token, uint256 amountIn) external view override returns (uint256 amountOut) {\\n        if (token == token0) {\\n            amountOut = price0Average.mul(amountIn).decode144();\\n        } else {\\n            require(token == token1, \\\"ExampleOracleSimple: INVALID_TOKEN\\\");\\n            amountOut = price1Average.mul(amountIn).decode144();\\n        }\\n    }\\n\\n    /* ======= EVENTS ====== */\\n    event Updated(uint256 price0CumulativeLast, uint256 price1CumulativeLast);\\n}\\n\",\"keccak256\":\"0x1c8d73deaeecc7ef20687ac954589e564c1726d861db5a1755b6e806e189c745\",\"license\":\"MIT\"},\"contracts/governance/Treasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n * Monetary policy logic to adjust supplies of Ant token assets\\n */\\n\\nimport \\\"@openzeppelin/contracts/math/Math.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n\\nimport \\\"./Boardroom.sol\\\";\\nimport \\\"./Oracle.sol\\\";\\nimport \\\"./ContributionPool.sol\\\";\\n\\nimport \\\"../core/BaseToken.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\n\\nimport \\\"../utils/EpochCounter.sol\\\";\\nimport \\\"../utils/ContractGuard.sol\\\";\\n\\ncontract Treasury is ContractGuard, EpochCounter {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== STATE ========== */\\n    // Flags\\n    bool public migrated = false;\\n    bool public initialized = false;\\n\\n    // Core\\n    address public fund;\\n    address public antToken;\\n    address public antBond;\\n    address public antShare;\\n    address public boardroom;\\n    IOracle public oracle;\\n\\n    // Parameters\\n    uint256 private accumulatedSeigniorage = 0;\\n    uint256 public fundAllocationRate = 2; // %\\n\\n    constructor(\\n        address _antToken,\\n        address _antBond,\\n        address _antShare,\\n        IOracle _oracle,\\n        address _boardroom,\\n        address _fund,\\n        uint256 _startTime,\\n        uint256 _period\\n    ) EpochCounter(_period, _startTime, 0) {\\n        antToken = _antToken;\\n        antBond = _antBond;\\n        antShare = _antShare;\\n        oracle = _oracle;\\n\\n        boardroom = _boardroom;\\n        fund = _fund;\\n    }\\n\\n    modifier checkMigration {\\n        require(!migrated, \\\"Treasury: migrated\\\");\\n\\n        _;\\n    }\\n\\n    modifier checkOperator {\\n        require(\\n            IOperatorAccessControl(antToken).isOperator(address(this)) &&\\n                IOperatorAccessControl(antBond).isOperator(address(this)) &&\\n                IOperatorAccessControl(antShare).isOperator(address(this)) &&\\n                IOperatorAccessControl(boardroom).isOperator(address(this)),\\n            \\\"Treasury: need more permission\\\"\\n        );\\n\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // budget\\n    function getReserve() public view returns (uint256) {\\n        return accumulatedSeigniorage;\\n    }\\n\\n    function tokenPriceTWAP() public view returns (uint256) {\\n        try oracle.priceTWAP(antToken) returns (uint256 price) {\\n            return price;\\n        } catch {\\n            revert(\\\"Treasury: failed to consult Ant Token swap price from the oracle\\\");\\n        }\\n    }\\n\\n    function priceDollar() public view returns (uint256) {\\n        try oracle.priceDollar() returns (uint256 price) {\\n            return price;\\n        } catch {\\n            revert(\\\"Treasury: failed to consult Ant Token external price from the oracle\\\");\\n        }\\n    }\\n\\n    /**\\n        Calculates the ceiling for the token price. This is a 5% more on the actual\\n        externally evaluated price of the token\\n\\n        @return The ceiling price multiplied by 1e18\\n    */\\n    function tokenPriceCeiling() public view returns (uint256) {\\n        return oracle.priceDollar().mul(uint256(105)).div(100);\\n    }\\n\\n    function migrate(address target) public onlyOperator checkOperator {\\n        require(!migrated, \\\"Treasury: migrated\\\");\\n\\n        // Ant Token\\n        IOperatorAccessControl(antToken).transferOperator(target);\\n        IERC20(antToken).transfer(target, IERC20(antToken).balanceOf(address(this)));\\n\\n        // Ant Bond\\n        IOperatorAccessControl(antBond).transferOperator(target);\\n        IERC20(antBond).transfer(target, IERC20(antBond).balanceOf(address(this)));\\n\\n        // share\\n        IOperatorAccessControl(antShare).transferOperator(target);\\n        IERC20(antShare).transfer(target, IERC20(antShare).balanceOf(address(this)));\\n\\n        migrated = true;\\n        emit Migration(target);\\n    }\\n\\n    function setFund(address newFund) public onlyOperator {\\n        fund = newFund;\\n        emit ContributionPoolChanged(_msgSender(), newFund);\\n    }\\n\\n    function setFundAllocationRate(uint256 rate) public onlyOperator {\\n        fundAllocationRate = rate;\\n        emit ContributionPoolRateChanged(_msgSender(), rate);\\n    }\\n\\n    /* ========== MUTABLE FUNCTIONS ========== */\\n\\n    /**\\n        Calls the orable to update the latest price\\n    */\\n    function _updateAntTokenPrice() internal {\\n        try oracle.update() {} catch {\\n            // Update will revert if called twice in less than the allocated period, so\\n            // just ignore the error if that happens\\n        }\\n    }\\n\\n    /**\\n        Buys Ant Bonds with Ant Tokens\\n\\n        Ant Tokens are burned and Ant Bonds are minted to the sender's account in a\\n        ratio of 1:(targetPrice/externalPrice)\\n\\n        @param amountAntToken Amount of Ant Tokens to burn in order to get the bonds\\n        @param targetPrice Target price at which the bonds will be purchased\\n    */\\n    function buyAntBonds(uint256 amountAntToken, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkMigration\\n        checkStartTime\\n        checkOperator\\n    {\\n        require(amountAntToken > 0, \\\"Treasury: cannot purchase antBonds with zero amount\\\");\\n\\n        uint256 antTokenPrice = tokenPriceTWAP();\\n        uint256 dollarPrice = priceDollar();\\n\\n        require(antTokenPrice == targetPrice, \\\"Treasury: Ant Token price moved\\\");\\n        require(antTokenPrice < dollarPrice, \\\"Treasury: Ant Token price not eligible for Ant Bond redemption\\\");\\n\\n        // Price ratio with 1e18 decimals\\n        uint256 priceRatio = antTokenPrice.mul(1e18).div(dollarPrice);\\n        uint256 amountBonds = amountAntToken.mul(1e18).div(priceRatio);\\n\\n        IBaseToken(antToken).burnFrom(_msgSender(), amountAntToken);\\n        IBaseToken(antBond).mint(_msgSender(), amountBonds);\\n\\n        _updateAntTokenPrice();\\n\\n        emit BoughtAntBonds(_msgSender(), amountAntToken);\\n    }\\n\\n    /**\\n        Redeems Ant Bonds for Ant Tokens\\n\\n        Ant Bonds are burned and Ant Tokens are transferred to the sender's account in a ratio of 1:1\\n\\n        @param amountAntBonds Amount of Ant Tokens to burn in order to get the bonds\\n        @param targetPrice Target price at which the bonds will be redeemed\\n    */\\n    function redeemAntBonds(uint256 amountAntBonds, uint256 targetPrice)\\n        external\\n        onlyOneBlock\\n        checkMigration\\n        checkStartTime\\n        checkOperator\\n    {\\n        require(amountAntBonds > 0, \\\"Treasury: cannot redeem antBonds with zero amount\\\");\\n\\n        uint256 tokenPrice = tokenPriceTWAP();\\n\\n        require(tokenPrice == targetPrice, \\\"Treasury: Ant Token price moved\\\");\\n        require(tokenPrice > tokenPriceCeiling(), \\\"Treasury: Ant Token price not eligible for Ant Bond redemption\\\");\\n        require(\\n            IERC20(antToken).balanceOf(address(this)) >= amountAntBonds,\\n            \\\"Treasury: treasury has no more budget for Ant Bonds redemption\\\"\\n        );\\n\\n        accumulatedSeigniorage = accumulatedSeigniorage.sub(Math.min(accumulatedSeigniorage, amountAntBonds));\\n\\n        IBaseToken(antBond).burnFrom(_msgSender(), amountAntBonds);\\n        IERC20(antToken).safeTransfer(_msgSender(), amountAntBonds);\\n\\n        _updateAntTokenPrice();\\n\\n        emit RedeemedAntBonds(_msgSender(), amountAntBonds);\\n    }\\n\\n    /**\\n        Calculates how many new Ant Tokens must be minted to bring the price down to the target price:\\n            - If the price is lower than the price celing (target price * 1.05) it does nothing\\n            - Fetches the price variation percentage and multiplies the current total supply minus\\n              the Treasury allocated tokens by the percentage to obtain the new extra supply to mint\\n            - From the new supply a 2% is removed for the Contribution Pool\\n            - The Treasury itself gets an amount calculated from the minimum of the new supply and\\n              the circulating bonds minus the Treasury current accumulated Seigniorage\\n            - Finally the Boardroom gets the rest of the new supply\\n     */\\n    function allocateSeigniorage() external onlyOneBlock checkMigration checkStartTime checkEpoch checkOperator {\\n        _updateAntTokenPrice();\\n\\n        uint256 tokenPrice = tokenPriceTWAP();\\n\\n        if (tokenPrice <= tokenPriceCeiling()) {\\n            return; // Just advance epoch instead of revert\\n        }\\n\\n        // Calculate current circulating supply and new supply to be minted\\n        uint256 currentSupply = IERC20(antToken).totalSupply().sub(accumulatedSeigniorage);\\n        uint256 percentage = oracle.priceVariationPercentage(antToken);\\n        uint256 additionalAntTokenSupply = currentSupply.mul(percentage).div(1e18);\\n\\n        IBaseToken(antToken).mint(address(this), additionalAntTokenSupply);\\n\\n        // Contribution Pool Reserve: allocate fundAllocationRate% from the new extra supply to the fund\\n        uint256 fundReserve = additionalAntTokenSupply.mul(fundAllocationRate).div(100);\\n        if (fundReserve > 0) {\\n            IERC20(antToken).safeIncreaseAllowance(fund, fundReserve);\\n            IContributionPool(fund).deposit(antToken, fundReserve, \\\"Treasury: Seigniorage Allocation\\\");\\n\\n            additionalAntTokenSupply = additionalAntTokenSupply.sub(fundReserve);\\n\\n            emit ContributionPoolFunded(block.timestamp, fundReserve);\\n        }\\n\\n        // Treasury Reserve\\n        uint256 availableBondSupply = IERC20(antBond).totalSupply().sub(accumulatedSeigniorage);\\n        uint256 treasuryReserve = Math.min(additionalAntTokenSupply, availableBondSupply);\\n        if (treasuryReserve > 0) {\\n            accumulatedSeigniorage = accumulatedSeigniorage.add(treasuryReserve);\\n\\n            emit TreasuryFunded(block.timestamp, treasuryReserve);\\n        }\\n\\n        // Boardroom Reserve: the rest of the new supply is allocated to the Boardroom\\n        uint256 boardroomReserve = additionalAntTokenSupply.sub(treasuryReserve);\\n        if (boardroomReserve > 0) {\\n            IERC20(antToken).safeIncreaseAllowance(boardroom, boardroomReserve);\\n            IBoardroom(boardroom).allocateSeigniorage(boardroomReserve);\\n\\n            emit BoardroomFunded(block.timestamp, boardroomReserve);\\n        }\\n    }\\n\\n    // GOV\\n    event Migration(address indexed target);\\n    event ContributionPoolChanged(address indexed operator, address newFund);\\n    event ContributionPoolRateChanged(address indexed operator, uint256 newRate);\\n\\n    // CORE\\n    event RedeemedAntBonds(address indexed from, uint256 amount);\\n    event BoughtAntBonds(address indexed from, uint256 amount);\\n    event TreasuryFunded(uint256 timestamp, uint256 seigniorage);\\n    event BoardroomFunded(uint256 timestamp, uint256 seigniorage);\\n    event ContributionPoolFunded(uint256 timestamp, uint256 seigniorage);\\n}\\n\",\"keccak256\":\"0x5f198b318f94aab1405fd9172a8082689f7a7abe6c596e6e9af6305efbe1404e\",\"license\":\"MIT\"},\"contracts/interfaces/IPancakePair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\ninterface IPancakePair {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint256 amount0In,\\n        uint256 amount1In,\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n    function factory() external view returns (address);\\n\\n    function token0() external view returns (address);\\n\\n    function token1() external view returns (address);\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function price0CumulativeLast() external view returns (uint256);\\n\\n    function price1CumulativeLast() external view returns (uint256);\\n\\n    function kLast() external view returns (uint256);\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function skim(address to) external;\\n\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0xc7bf74ebcc26680dd7aa52cac007b0c7f56f2301f17fbcfb0df27247d55834cb\",\"license\":\"MIT\"},\"contracts/interfaces/IStdReference.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\npragma abicoder v2;\\n\\ninterface IStdReference {\\n    /// A structure returned whenever someone requests for standard reference data.\\n    struct ReferenceData {\\n        uint256 rate; // base/quote exchange rate, multiplied by 1e18.\\n        uint256 lastUpdatedBase; // UNIX epoch of the last time when base price gets updated.\\n        uint256 lastUpdatedQuote; // UNIX epoch of the last time when quote price gets updated.\\n    }\\n\\n    /// Returns the price data for the given base/quote pair. Revert if not available.\\n    function getReferenceData(string memory _base, string memory _quote) external view returns (ReferenceData memory);\\n\\n    /// Similar to getReferenceData, but with multiple base/quote pairs at once.\\n    function getReferenceDataBulk(string[] memory _bases, string[] memory _quotes)\\n        external\\n        view\\n        returns (ReferenceData[] memory);\\n}\\n\",\"keccak256\":\"0x648d70a273f88c5ca7718f3d35aad3938e2bb8143817d3c98303235499f98049\",\"license\":\"MIT\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.4.0;\\n\\n// computes square roots using the babylonian method\\n// https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_method\\nlibrary Babylonian {\\n    // credit for this implementation goes to\\n    // https://github.com/abdk-consulting/abdk-libraries-solidity/blob/master/ABDKMath64x64.sol#L687\\n    function sqrt(uint256 x) internal pure returns (uint256) {\\n        if (x == 0) return 0;\\n        // this block is equivalent to r = uint256(1) << (BitMath.mostSignificantBit(x) / 2);\\n        // however that code costs significantly more gas\\n        uint256 xx = x;\\n        uint256 r = 1;\\n        if (xx >= 0x100000000000000000000000000000000) {\\n            xx >>= 128;\\n            r <<= 64;\\n        }\\n        if (xx >= 0x10000000000000000) {\\n            xx >>= 64;\\n            r <<= 32;\\n        }\\n        if (xx >= 0x100000000) {\\n            xx >>= 32;\\n            r <<= 16;\\n        }\\n        if (xx >= 0x10000) {\\n            xx >>= 16;\\n            r <<= 8;\\n        }\\n        if (xx >= 0x100) {\\n            xx >>= 8;\\n            r <<= 4;\\n        }\\n        if (xx >= 0x10) {\\n            xx >>= 4;\\n            r <<= 2;\\n        }\\n        if (xx >= 0x8) {\\n            r <<= 1;\\n        }\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1;\\n        r = (r + x / r) >> 1; // Seven iterations should be enough\\n        uint256 r1 = x / r;\\n        return (r < r1 ? r : r1);\\n    }\\n}\\n\",\"keccak256\":\"0xeb1c2a281a00f4660775f75ccfa1e51fbe1d75f86aeb9d0d297151ecdb900177\",\"license\":\"GPL-3.0-or-later\"},\"contracts/libraries/FixedPoint.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity >=0.4.0;\\n\\nimport \\\"./Babylonian.sol\\\";\\n\\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\\nlibrary FixedPoint {\\n    // range: [0, 2**112 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq112x112 {\\n        uint224 _x;\\n    }\\n\\n    // range: [0, 2**144 - 1]\\n    // resolution: 1 / 2**112\\n    struct uq144x112 {\\n        uint256 _x;\\n    }\\n\\n    uint8 private constant RESOLUTION = 112;\\n    uint256 private constant Q112 = uint256(1) << RESOLUTION;\\n    uint256 private constant Q224 = Q112 << RESOLUTION;\\n\\n    // encode a uint112 as a UQ112x112\\n    function encode(uint112 x) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(x) << RESOLUTION);\\n    }\\n\\n    // encodes a uint144 as a UQ144x112\\n    function encode144(uint144 x) internal pure returns (uq144x112 memory) {\\n        return uq144x112(uint256(x) << RESOLUTION);\\n    }\\n\\n    // divide a UQ112x112 by a uint112, returning a UQ112x112\\n    function div(uq112x112 memory self, uint112 x) internal pure returns (uq112x112 memory) {\\n        require(x != 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112(self._x / uint224(x));\\n    }\\n\\n    // multiply a UQ112x112 by a uint, returning a UQ144x112\\n    // reverts on overflow\\n    function mul(uq112x112 memory self, uint256 y) internal pure returns (uq144x112 memory) {\\n        uint256 z;\\n        require(y == 0 || (z = uint256(self._x) * y) / y == uint256(self._x), \\\"FixedPoint: MULTIPLICATION_OVERFLOW\\\");\\n        return uq144x112(z);\\n    }\\n\\n    // returns a UQ112x112 which represents the ratio of the numerator to the denominator\\n    // equivalent to encode(numerator).div(denominator)\\n    function fraction(uint112 numerator, uint112 denominator) internal pure returns (uq112x112 memory) {\\n        require(denominator > 0, \\\"FixedPoint: DIV_BY_ZERO\\\");\\n        return uq112x112((uint224(numerator) << RESOLUTION) / denominator);\\n    }\\n\\n    // decode a UQ112x112 into a uint112 by truncating after the radix point\\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\\n        return uint112(self._x >> RESOLUTION);\\n    }\\n\\n    // decode a UQ144x112 into a uint144 by truncating after the radix point\\n    function decode144(uq144x112 memory self) internal pure returns (uint144) {\\n        return uint144(self._x >> RESOLUTION);\\n    }\\n\\n    // take the reciprocal of a UQ112x112\\n    function reciprocal(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        require(self._x != 0, \\\"FixedPoint: ZERO_RECIPROCAL\\\");\\n        return uq112x112(uint224(Q224 / self._x));\\n    }\\n\\n    // square root of a UQ112x112\\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x)) << 56));\\n    }\\n}\\n\",\"keccak256\":\"0xcc3065843d26a66dc17c9d3bb73188ecdad4cb7a8334373998b5dea158edb16e\",\"license\":\"GPL-3.0-or-later\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0xd17724e9c3d6c6432f3d183099d288df7232b03b34ac1004ca4a8b41e58728fe\",\"license\":\"MIT\"},\"contracts/utils/EpochCounter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Counts epoch periods and defines a modifier to prevent operations if the next\\n    epoch has not been reached yet\\n\\n    @dev Calling the checkEpoch modifier will automatilly increase the epoch to the\\n    next period if the check succeeds\\n */\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\nimport \\\"./StartTimeLock.sol\\\";\\n\\ncontract EpochCounter is OperatorAccessControl, StartTimeLock {\\n    using SafeMath for uint256;\\n\\n    uint256 private _period;\\n    uint256 private _epoch;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        uint256 period,\\n        uint256 startTime,\\n        uint256 startEpoch\\n    ) StartTimeLock(startTime) {\\n        _period = period;\\n        _epoch = startEpoch;\\n    }\\n\\n    /* ========== Modifier ========== */\\n    modifier checkEpoch {\\n        require(block.timestamp >= nextEpochPoint(), \\\"Epoch: not allowed\\\");\\n        _;\\n        _epoch = _epoch.add(1);\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    function getCurrentEpoch() public view returns (uint256) {\\n        return _epoch;\\n    }\\n\\n    function getPeriod() public view returns (uint256) {\\n        return _period;\\n    }\\n\\n    function nextEpochPoint() public view returns (uint256) {\\n        return startTime.add(_epoch.mul(_period));\\n    }\\n\\n    /* ========== GOVERNANCE ========== */\\n    function setPeriod(uint256 period) external onlyOperator {\\n        _period = period;\\n    }\\n}\\n\",\"keccak256\":\"0xe4a36228ab1a0d23483946716130b923bfe6d1685f612e9ec6b740268ee8a1e3\",\"license\":\"MIT\"},\"contracts/utils/StartTimeLock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Utility contract to prevent operations before certain start time has been reached\\n */\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract StartTimeLock {\\n    uint256 public startTime;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(uint256 startTime_) {\\n        startTime = startTime_;\\n    }\\n\\n    /* ========== Modifier ========== */\\n    modifier checkStartTime {\\n        require(block.timestamp >= startTime, \\\"StartTimeLock: not started yet\\\");\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x2560a1c36c9842a20599d91f0349c1b06935da12b281abbc6e5c9845527a679c\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040526007805461ffff191690556000600d556002600e553480156200002657600080fd5b5060405162003cab38038062003cab83398181016040526101008110156200004d57600080fd5b508051602082015160408301516060840151608085015160a086015160c087015160e090970151959694959394929391929091808260008160008051602062003c8b8339815191526200009f62000206565b608091909152600280546001600160a01b0319166001600160a01b03909216919091179055620000df60008051602062003c8b833981519152806200020a565b6200010360008051602062003c8b833981519152620000fd62000206565b6200025c565b6200012d60008051602062003c6b83398151915260008051602062003c8b8339815191526200020a565b6200013762000206565b600380546001600160a01b0319166001600160a01b039283161790819055620001729160008051602062003c6b83398151915291166200025c565b600455600592909255506006555050600880546001600160a01b039788166001600160a01b0319918216179091556009805496881696821696909617909555600a805494871694861694909417909355600c805492861692851692909217909155600b805491851691909316179091556007805491909216620100000262010000600160b01b03199091161790556200036e565b3390565b600082815260016020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526001602052604090912060020155565b6200026882826200026c565b5050565b60008281526001602090815260409091206200029391839062002c0f620002e7821b17901c565b156200026857620002a362000206565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002fe836001600160a01b03841662000307565b90505b92915050565b600062000315838362000356565b6200034d5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000301565b50600062000301565b60009081526001919091016020526040902054151590565b6080516138c9620003a2600039806108435280610873528061142352806114cf52806114fd52806117a852506138c96000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c806378e979251161017b578063c3f490db116100d8578063d547741f1161008c578063e6234d5b11610071578063e6234d5b146105e4578063e8673f03146105ec578063f5b541a61461060f576102ad565b8063d547741f14610595578063e2b69b66146105c1576102ad565b8063ca15c873116100bd578063ca15c8731461054a578063cc3ad7da14610567578063ce5494bb1461056f576102ad565b8063c3f490db1461053a578063c5967c2614610542576102ad565b806395b1828a1161012f578063b60d428811610114578063b60d428814610522578063b97dd9e21461052a578063c1aa390014610532576102ad565b806395b1828a146104fd578063a217fddf1461051a576102ad565b8063839cf65211610160578063839cf652146104a65780639010d07c146104ae57806391d14854146104d1576102ad565b806378e97925146104965780637dc0d1d01461049e576102ad565b80632f2ff15d116102295780635b756179116101dd5780636d70f7ae116101c25780636d70f7ae1461044257806375829def1461046857806375b238fc1461048e576102ad565b80635b756179146104325780635e02c51e1461043a576102ad565b80634b75e5271161020e5780634b75e527146103fe5780634ec42e8e1461040657806359bf5d391461042a576102ad565b80632f2ff15d146103a657806336568abe146103d2576102ad565b80631ed241951161028057806324d7806c1161026557806324d7806c1461035257806329605e77146103785780632c678c641461039e576102ad565b80631ed241951461032d578063248a9ca314610335576102ad565b80630e21750f146102b25780630ef590a6146102da5780630f3a9f65146102f4578063158ef93e14610311575b600080fd5b6102d8600480360360208110156102c857600080fd5b50356001600160a01b0316610617565b005b6102e261070f565b60408051918252519081900360200190f35b6102d86004803603602081101561030a57600080fd5b50356107a7565b610319610813565b604080519115158252519081900360200190f35b6102e2610821565b6102e26004803603602081101561034b57600080fd5b5035610827565b6103196004803603602081101561036857600080fd5b50356001600160a01b031661083c565b6102d86004803603602081101561038e57600080fd5b50356001600160a01b031661086e565b6103196109a6565b6102d8600480360360408110156103bc57600080fd5b50803590602001356001600160a01b03166109af565b6102d8600480360360408110156103e857600080fd5b50803590602001356001600160a01b0316610a16565b6102e2610a77565b61040e610b23565b604080516001600160a01b039092168252519081900360200190f35b6102e2610b32565b6102d8610b38565b61040e6113e3565b6103196004803603602081101561045857600080fd5b50356001600160a01b03166113f2565b6102d86004803603602081101561047e57600080fd5b50356001600160a01b031661141e565b6102e261155a565b6102e261157e565b61040e611584565b61040e611593565b61040e600480360360408110156104c457600080fd5b50803590602001356115a2565b610319600480360360408110156104e757600080fd5b50803590602001356001600160a01b03166115c1565b6102d86004803603602081101561051357600080fd5b50356115d9565b6102e2611690565b61040e611695565b6102e26116aa565b6102e26116b0565b6102e26116b6565b6102e261176a565b6102e26004803603602081101561056057600080fd5b503561178f565b6102e26117a6565b6102d86004803603602081101561058557600080fd5b50356001600160a01b03166117ca565b6102d8600480360360408110156105ab57600080fd5b50803590602001356001600160a01b0316611f2a565b6102d8600480360360408110156105d757600080fd5b5080359060200135611f83565b61040e612595565b6102d86004803603604081101561060257600080fd5b50803590602001356125a4565b6102e2612beb565b6106487f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6115c1565b6106835760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600780547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416021790556106c3612c24565b6001600160a01b03167f970b0c70d6e9879d19345f9dbfd8bacae71546478b8bb2d8a56ad8927d3d436e8260405180826001600160a01b0316815260200191505060405180910390a250565b60006107a1606461079b6069600c60009054906101000a90046001600160a01b03166001600160a01b0316634b75e5276040518163ffffffff1660e01b815260040160206040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d602081101561079357600080fd5b505190612c28565b90612c81565b90505b90565b6107d37f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b61080e5760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600555565b600754610100900460ff1681565b60055490565b60009081526001602052604090206002015490565b60006108687f0000000000000000000000000000000000000000000000000000000000000000836115c1565b92915050565b61089a7f0000000000000000000000000000000000000000000000000000000000000000610643612c24565b6108d55760405162461bcd60e51b81526004018080602001828103825260348152602001806136336034913960400191505060405180910390fd5b6001600160a01b03811661091a5760405162461bcd60e51b815260040180806020018281038252603a815260200180613791603a913960400191505060405180910390fd5b600354610951907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929906001600160a01b0316611f2a565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556109a37f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826109af565b50565b60075460ff1681565b6000828152600160205260409020600201546109cd90610643612c24565b610a085760405162461bcd60e51b815260040180806020018281038252602f815260200180613558602f913960400191505060405180910390fd5b610a128282612ce8565b5050565b610a1e612c24565b6001600160a01b0316816001600160a01b031614610a6d5760405162461bcd60e51b815260040180806020018281038252602f81526020018061388e602f913960400191505060405180910390fd5b610a128282612d51565b600c5460408051634b75e52760e01b815290516000926001600160a01b031691634b75e527916004808301926020929190829003018186803b158015610abc57600080fd5b505afa925050508015610ae157506040513d6020811015610adc57600080fd5b505160015b610b1c5760405162461bcd60e51b81526004018080602001828103825260448152602001806136676044913960600191505060405180910390fd5b90506107a4565b6008546001600160a01b031681565b600d5490565b610b40612dba565b15610b7c5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b610b84612dd9565b15610bc05760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615610c0d576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b600454421015610c64576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b610c6c61176a565b421015610cc0576040805162461bcd60e51b815260206004820152601260248201527f45706f63683a206e6f7420616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d6020811015610d3557600080fd5b50518015610db65750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610d8957600080fd5b505afa158015610d9d573d6000803e3d6000fd5b505050506040513d6020811015610db357600080fd5b50515b8015610e355750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610e0857600080fd5b505afa158015610e1c573d6000803e3d6000fd5b505050506040513d6020811015610e3257600080fd5b50515b8015610eb45750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d6020811015610eb157600080fd5b50515b610f05576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b610f0d612df8565b6000610f176116b6565b9050610f2161070f565b8111610f2d5750611397565b6000610fb5600d54600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8357600080fd5b505afa158015610f97573d6000803e3d6000fd5b505050506040513d6020811015610fad57600080fd5b505190612e58565b600c5460085460408051635e48700d60e01b81526001600160a01b03928316600482015290519394506000939190921691635e48700d916024808301926020929190829003018186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d602081101561103557600080fd5b505190506000611051670de0b6b3a764000061079b8585612c28565b600854604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b5050505060006110db606461079b600e5485612c2890919063ffffffff16565b9050801561120457600754600854611107916001600160a01b0391821691620100009091041683612eb5565b60075460085460408051635ff03ed360e11b81526001600160a01b0392831660048201526024810185905260606044820152602060648201527f54726561737572793a20536569676e696f7261676520416c6c6f636174696f6e60848201529051620100009093049091169163bfe07da69160a48082019260009290919082900301818387803b15801561119a57600080fd5b505af11580156111ae573d6000803e3d6000fd5b505050506111c58183612e5890919063ffffffff16565b604080514281526020810184905281519294507f4caa64211297e9263667fef70732dc65ca7a8e8c60dc72539ed94518628212d0929081900390910190a15b600061125a600d54600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8357600080fd5b905060006112688483612fbb565b905080156112bc57600d5461127d9082612fd1565b600d55604080514281526020810183905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b60006112c88583612e58565b9050801561138e57600b546008546112ed916001600160a01b03918216911683612eb5565b600b54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561133a57600080fd5b505af115801561134e573d6000803e3d6000fd5b5050604080514281526020810185905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a15b50505050505050505b6006546113a5906001612fd1565b600655436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600b546001600160a01b031681565b60006108687f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929836115c1565b61144a7f0000000000000000000000000000000000000000000000000000000000000000610643612c24565b6114855760405162461bcd60e51b81526004018080602001828103825260348152602001806136336034913960400191505060405180910390fd5b6001600160a01b0381166114ca5760405162461bcd60e51b815260040180806020018281038252603d8152602001806135f6603d913960400191505060405180910390fd5b6114f47f0000000000000000000000000000000000000000000000000000000000000000826109af565b60025461152b907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0316611f2a565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60045481565b600c546001600160a01b031681565b6009546001600160a01b031681565b60008281526001602052604081206115ba908361302b565b9392505050565b60008281526001602052604081206115ba9083613037565b6116057f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6116405760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600e81905561164d612c24565b6001600160a01b03167f25ba333c9a98f8f18bb40ff507a4a1fb423614f442759c754d038a9de3f81cf3826040518082815260200191505060405180910390a250565b600081565b6007546201000090046001600160a01b031681565b60065490565b600e5481565b600c546008546040805163ba86c68360e01b81526001600160a01b0392831660048201529051600093929092169163ba86c68391602480820192602092909190829003018186803b15801561170a57600080fd5b505afa92505050801561172f57506040513d602081101561172a57600080fd5b505160015b610b1c5760405162461bcd60e51b81526004018080602001828103825260408152602001806137cb6040913960400191505060405180910390fd5b60006107a1611786600554600654612c2890919063ffffffff16565b60045490612fd1565b60008181526001602052604081206108689061304c565b7f000000000000000000000000000000000000000000000000000000000000000081565b6117f67f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6118315760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561187c57600080fd5b505afa158015611890573d6000803e3d6000fd5b505050506040513d60208110156118a657600080fd5b505180156119275750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b50515b80156119a65750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d60208110156119a357600080fd5b50515b8015611a255750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d6020811015611a2257600080fd5b50515b611a76576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60075460ff1615611ac3576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b600854604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611b1157600080fd5b505af1158015611b25573d6000803e3d6000fd5b5050600854604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611b7d57600080fd5b505afa158015611b91573d6000803e3d6000fd5b505050506040513d6020811015611ba757600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b505050506040513d6020811015611c2257600080fd5b5050600954604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b5050600954604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d6020811015611d0857600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611d5957600080fd5b505af1158015611d6d573d6000803e3d6000fd5b505050506040513d6020811015611d8357600080fd5b5050600a54604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611dd357600080fd5b505af1158015611de7573d6000803e3d6000fd5b5050600a54604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d6020811015611e6957600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611eba57600080fd5b505af1158015611ece573d6000803e3d6000fd5b505050506040513d6020811015611ee457600080fd5b50506007805460ff191660011790556040516001600160a01b038216907f0caca70b66aed56b0630989a049110023c5a3f37e0ea4b6ce96fc747663f3ebc90600090a250565b600082815260016020526040902060020154611f4890610643612c24565b610a6d5760405162461bcd60e51b81526004018080602001828103825260308152602001806136d16030913960400191505060405180910390fd5b611f8b612dba565b15611fc75760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b611fcf612dd9565b1561200b5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615612058576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b6004544210156120af576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d602081101561212457600080fd5b505180156121a55750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561217857600080fd5b505afa15801561218c573d6000803e3d6000fd5b505050506040513d60208110156121a257600080fd5b50515b80156122245750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d602081101561222157600080fd5b50515b80156122a35750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561227657600080fd5b505afa15801561228a573d6000803e3d6000fd5b505050506040513d60208110156122a057600080fd5b50515b6122f4576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116123335760405162461bcd60e51b815260040180806020018281038252603381526020018061385b6033913960400191505060405180910390fd5b600061233d6116b6565b90506000612349610a77565b905082821461239f576040805162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20416e7420546f6b656e207072696365206d6f76656400604482015290519081900360640190fd5b8082106123dd5760405162461bcd60e51b815260040180806020018281038252603e815260200180613701603e913960400191505060405180910390fd5b60006123f58261079b85670de0b6b3a7640000612c28565b9050600061240f8261079b88670de0b6b3a7640000612c28565b6008549091506001600160a01b03166379cc679061242b612c24565b886040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561247257600080fd5b505af1158015612486573d6000803e3d6000fd5b50506009546001600160a01b031691506340c10f1990506124a5612c24565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b5050505061250c612df8565b612514612c24565b6001600160a01b03167fb8b27ae2aaf9a23d923980a0cc97c93dfc2591762f78f9573a4ceba3ea8ba6e3876040518082815260200191505060405180910390a25050436000908152602081815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905550505050565b600a546001600160a01b031681565b6125ac612dba565b156125e85760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b6125f0612dd9565b1561262c5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615612679576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b6004544210156126d0576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561271b57600080fd5b505afa15801561272f573d6000803e3d6000fd5b505050506040513d602081101561274557600080fd5b505180156127c65750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561279957600080fd5b505afa1580156127ad573d6000803e3d6000fd5b505050506040513d60208110156127c357600080fd5b50515b80156128455750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d602081101561284257600080fd5b50515b80156128c45750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561289757600080fd5b505afa1580156128ab573d6000803e3d6000fd5b505050506040513d60208110156128c157600080fd5b50515b612915576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116129545760405162461bcd60e51b81526004018080602001828103825260318152602001806137606031913960400191505060405180910390fd5b600061295e6116b6565b90508181146129b4576040805162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20416e7420546f6b656e207072696365206d6f76656400604482015290519081900360640190fd5b6129bc61070f565b81116129f95760405162461bcd60e51b815260040180806020018281038252603e815260200180613701603e913960400191505060405180910390fd5b600854604080516370a0823160e01b8152306004820152905185926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612a4357600080fd5b505afa158015612a57573d6000803e3d6000fd5b505050506040513d6020811015612a6d57600080fd5b50511015612aac5760405162461bcd60e51b815260040180806020018281038252603e815260200180613587603e913960400191505060405180910390fd5b612ac4612abb600d5485612fbb565b600d5490612e58565b600d556009546001600160a01b03166379cc6790612ae0612c24565b856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612b2757600080fd5b505af1158015612b3b573d6000803e3d6000fd5b50505050612b5d612b4a612c24565b6008546001600160a01b03169085613057565b612b65612df8565b612b6d612c24565b6001600160a01b03167f0cee097cf19c478e228383fa90c54c4cdfc970881ae4f7e0dfdb2eaba9b2c48c846040518082815260200191505060405180910390a25050436000908152602081815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905550565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60006115ba836001600160a01b0384166130c3565b3390565b600082612c3757506000610868565b82820282848281612c4457fe5b04146115ba5760405162461bcd60e51b815260040180806020018281038252602181526020018061373f6021913960400191505060405180910390fd5b6000808211612cd7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ce057fe5b049392505050565b6000828152600160205260409020612d009082612c0f565b15610a1257612d0d612c24565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600160205260409020612d69908261310d565b15610a1257612d76612c24565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b600c60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612e4857600080fd5b505af19250505080156109a35750565b600082821115612eaf576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612f4b82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612f1957600080fd5b505afa158015612f2d573d6000803e3d6000fd5b505050506040513d6020811015612f4357600080fd5b505190612fd1565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052909150612fb5908590613122565b50505050565b6000818310612fca57816115ba565b5090919050565b6000828201838110156115ba576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006115ba83836131d3565b60006115ba836001600160a01b038416613237565b60006108688261324f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526130be908490613122565b505050565b60006130cf8383613237565b61310557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610868565b506000610868565b60006115ba836001600160a01b038416613253565b6000613177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133199092919063ffffffff16565b8051909150156130be5780806020019051602081101561319657600080fd5b50516130be5760405162461bcd60e51b815260040180806020018281038252602a81526020018061380b602a913960400191505060405180910390fd5b815460009082106132155760405162461bcd60e51b81526004018080602001828103825260228152602001806135366022913960400191505060405180910390fd5b82600001828154811061322457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561330f578354600019808301919081019060009087908390811061328657fe5b90600052602060002001549050808760000184815481106132a357fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806132d357fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610868565b6000915050610868565b60606133288484600085613330565b949350505050565b6060824710156133715760405162461bcd60e51b81526004018080602001828103825260268152602001806136ab6026913960400191505060405180910390fd5b61337a8561348b565b6133cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106134095780518252601f1990920191602091820191016133ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461346b576040519150601f19603f3d011682016040523d82523d6000602084013e613470565b606091505b5091509150613480828286613491565b979650505050505050565b3b151590565b606083156134a05750816115ba565b8251156134b05782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134fa5781810151838201526020016134e2565b50505050905090810190601f1680156135275780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7454726561737572793a20747265617375727920686173206e6f206d6f72652062756467657420666f7220416e7420426f6e647320726564656d7074696f6e4f70657261746f72416363657373436f6e74726f6c3a2073656e646572207265717569726573207065726d697373696f6e41646d696e416363657373436f6e74726f6c48656c7065723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7241646d696e416363657373436f6e74726f6c48656c7065723a2073656e646572207265717569726573207065726d697373696f6e54726561737572793a206661696c656420746f20636f6e73756c7420416e7420546f6b656e2065787465726e616c2070726963652066726f6d20746865206f7261636c65416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6554726561737572793a20416e7420546f6b656e207072696365206e6f7420656c696769626c6520666f7220416e7420426f6e6420726564656d7074696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f742072656465656d20616e74426f6e64732077697468207a65726f20616d6f756e744f70657261746f72416363657373436f6e74726f6c3a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7254726561737572793a206661696c656420746f20636f6e73756c7420416e7420546f6b656e20737761702070726963652066726f6d20746865206f7261636c655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e54726561737572793a2063616e6e6f7420707572636861736520616e74426f6e64732077697468207a65726f20616d6f756e74416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a164736f6c6343000706000a97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
    "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c806378e979251161017b578063c3f490db116100d8578063d547741f1161008c578063e6234d5b11610071578063e6234d5b146105e4578063e8673f03146105ec578063f5b541a61461060f576102ad565b8063d547741f14610595578063e2b69b66146105c1576102ad565b8063ca15c873116100bd578063ca15c8731461054a578063cc3ad7da14610567578063ce5494bb1461056f576102ad565b8063c3f490db1461053a578063c5967c2614610542576102ad565b806395b1828a1161012f578063b60d428811610114578063b60d428814610522578063b97dd9e21461052a578063c1aa390014610532576102ad565b806395b1828a146104fd578063a217fddf1461051a576102ad565b8063839cf65211610160578063839cf652146104a65780639010d07c146104ae57806391d14854146104d1576102ad565b806378e97925146104965780637dc0d1d01461049e576102ad565b80632f2ff15d116102295780635b756179116101dd5780636d70f7ae116101c25780636d70f7ae1461044257806375829def1461046857806375b238fc1461048e576102ad565b80635b756179146104325780635e02c51e1461043a576102ad565b80634b75e5271161020e5780634b75e527146103fe5780634ec42e8e1461040657806359bf5d391461042a576102ad565b80632f2ff15d146103a657806336568abe146103d2576102ad565b80631ed241951161028057806324d7806c1161026557806324d7806c1461035257806329605e77146103785780632c678c641461039e576102ad565b80631ed241951461032d578063248a9ca314610335576102ad565b80630e21750f146102b25780630ef590a6146102da5780630f3a9f65146102f4578063158ef93e14610311575b600080fd5b6102d8600480360360208110156102c857600080fd5b50356001600160a01b0316610617565b005b6102e261070f565b60408051918252519081900360200190f35b6102d86004803603602081101561030a57600080fd5b50356107a7565b610319610813565b604080519115158252519081900360200190f35b6102e2610821565b6102e26004803603602081101561034b57600080fd5b5035610827565b6103196004803603602081101561036857600080fd5b50356001600160a01b031661083c565b6102d86004803603602081101561038e57600080fd5b50356001600160a01b031661086e565b6103196109a6565b6102d8600480360360408110156103bc57600080fd5b50803590602001356001600160a01b03166109af565b6102d8600480360360408110156103e857600080fd5b50803590602001356001600160a01b0316610a16565b6102e2610a77565b61040e610b23565b604080516001600160a01b039092168252519081900360200190f35b6102e2610b32565b6102d8610b38565b61040e6113e3565b6103196004803603602081101561045857600080fd5b50356001600160a01b03166113f2565b6102d86004803603602081101561047e57600080fd5b50356001600160a01b031661141e565b6102e261155a565b6102e261157e565b61040e611584565b61040e611593565b61040e600480360360408110156104c457600080fd5b50803590602001356115a2565b610319600480360360408110156104e757600080fd5b50803590602001356001600160a01b03166115c1565b6102d86004803603602081101561051357600080fd5b50356115d9565b6102e2611690565b61040e611695565b6102e26116aa565b6102e26116b0565b6102e26116b6565b6102e261176a565b6102e26004803603602081101561056057600080fd5b503561178f565b6102e26117a6565b6102d86004803603602081101561058557600080fd5b50356001600160a01b03166117ca565b6102d8600480360360408110156105ab57600080fd5b50803590602001356001600160a01b0316611f2a565b6102d8600480360360408110156105d757600080fd5b5080359060200135611f83565b61040e612595565b6102d86004803603604081101561060257600080fd5b50803590602001356125a4565b6102e2612beb565b6106487f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6115c1565b6106835760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600780547fffffffffffffffffffff0000000000000000000000000000000000000000ffff16620100006001600160a01b038416021790556106c3612c24565b6001600160a01b03167f970b0c70d6e9879d19345f9dbfd8bacae71546478b8bb2d8a56ad8927d3d436e8260405180826001600160a01b0316815260200191505060405180910390a250565b60006107a1606461079b6069600c60009054906101000a90046001600160a01b03166001600160a01b0316634b75e5276040518163ffffffff1660e01b815260040160206040518083038186803b15801561076957600080fd5b505afa15801561077d573d6000803e3d6000fd5b505050506040513d602081101561079357600080fd5b505190612c28565b90612c81565b90505b90565b6107d37f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b61080e5760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600555565b600754610100900460ff1681565b60055490565b60009081526001602052604090206002015490565b60006108687f0000000000000000000000000000000000000000000000000000000000000000836115c1565b92915050565b61089a7f0000000000000000000000000000000000000000000000000000000000000000610643612c24565b6108d55760405162461bcd60e51b81526004018080602001828103825260348152602001806136336034913960400191505060405180910390fd5b6001600160a01b03811661091a5760405162461bcd60e51b815260040180806020018281038252603a815260200180613791603a913960400191505060405180910390fd5b600354610951907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929906001600160a01b0316611f2a565b6003805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556109a37f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929826109af565b50565b60075460ff1681565b6000828152600160205260409020600201546109cd90610643612c24565b610a085760405162461bcd60e51b815260040180806020018281038252602f815260200180613558602f913960400191505060405180910390fd5b610a128282612ce8565b5050565b610a1e612c24565b6001600160a01b0316816001600160a01b031614610a6d5760405162461bcd60e51b815260040180806020018281038252602f81526020018061388e602f913960400191505060405180910390fd5b610a128282612d51565b600c5460408051634b75e52760e01b815290516000926001600160a01b031691634b75e527916004808301926020929190829003018186803b158015610abc57600080fd5b505afa925050508015610ae157506040513d6020811015610adc57600080fd5b505160015b610b1c5760405162461bcd60e51b81526004018080602001828103825260448152602001806136676044913960600191505060405180910390fd5b90506107a4565b6008546001600160a01b031681565b600d5490565b610b40612dba565b15610b7c5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b610b84612dd9565b15610bc05760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615610c0d576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b600454421015610c64576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b610c6c61176a565b421015610cc0576040805162461bcd60e51b815260206004820152601260248201527f45706f63683a206e6f7420616c6c6f7765640000000000000000000000000000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610d0b57600080fd5b505afa158015610d1f573d6000803e3d6000fd5b505050506040513d6020811015610d3557600080fd5b50518015610db65750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610d8957600080fd5b505afa158015610d9d573d6000803e3d6000fd5b505050506040513d6020811015610db357600080fd5b50515b8015610e355750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610e0857600080fd5b505afa158015610e1c573d6000803e3d6000fd5b505050506040513d6020811015610e3257600080fd5b50515b8015610eb45750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b158015610e8757600080fd5b505afa158015610e9b573d6000803e3d6000fd5b505050506040513d6020811015610eb157600080fd5b50515b610f05576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b610f0d612df8565b6000610f176116b6565b9050610f2161070f565b8111610f2d5750611397565b6000610fb5600d54600860009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8357600080fd5b505afa158015610f97573d6000803e3d6000fd5b505050506040513d6020811015610fad57600080fd5b505190612e58565b600c5460085460408051635e48700d60e01b81526001600160a01b03928316600482015290519394506000939190921691635e48700d916024808301926020929190829003018186803b15801561100b57600080fd5b505afa15801561101f573d6000803e3d6000fd5b505050506040513d602081101561103557600080fd5b505190506000611051670de0b6b3a764000061079b8585612c28565b600854604080516340c10f1960e01b81523060048201526024810184905290519293506001600160a01b03909116916340c10f199160448082019260009290919082900301818387803b1580156110a757600080fd5b505af11580156110bb573d6000803e3d6000fd5b5050505060006110db606461079b600e5485612c2890919063ffffffff16565b9050801561120457600754600854611107916001600160a01b0391821691620100009091041683612eb5565b60075460085460408051635ff03ed360e11b81526001600160a01b0392831660048201526024810185905260606044820152602060648201527f54726561737572793a20536569676e696f7261676520416c6c6f636174696f6e60848201529051620100009093049091169163bfe07da69160a48082019260009290919082900301818387803b15801561119a57600080fd5b505af11580156111ae573d6000803e3d6000fd5b505050506111c58183612e5890919063ffffffff16565b604080514281526020810184905281519294507f4caa64211297e9263667fef70732dc65ca7a8e8c60dc72539ed94518628212d0929081900390910190a15b600061125a600d54600960009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f8357600080fd5b905060006112688483612fbb565b905080156112bc57600d5461127d9082612fd1565b600d55604080514281526020810183905281517ff705142bf09f04297640495ddf7c59b7fd6f51894c5aea9602d631cf05f0efc2929181900390910190a15b60006112c88583612e58565b9050801561138e57600b546008546112ed916001600160a01b03918216911683612eb5565b600b54604080516397ffe1d760e01b81526004810184905290516001600160a01b03909216916397ffe1d79160248082019260009290919082900301818387803b15801561133a57600080fd5b505af115801561134e573d6000803e3d6000fd5b5050604080514281526020810185905281517f03ca7276ab7799bf73fb79d27ff0610cd7049574f2508ef8445162833d439aea9450908190039091019150a15b50505050505050505b6006546113a5906001612fd1565b600655436000908152602081815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b600b546001600160a01b031681565b60006108687f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929836115c1565b61144a7f0000000000000000000000000000000000000000000000000000000000000000610643612c24565b6114855760405162461bcd60e51b81526004018080602001828103825260348152602001806136336034913960400191505060405180910390fd5b6001600160a01b0381166114ca5760405162461bcd60e51b815260040180806020018281038252603d8152602001806135f6603d913960400191505060405180910390fd5b6114f47f0000000000000000000000000000000000000000000000000000000000000000826109af565b60025461152b907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b0316611f2a565b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b60045481565b600c546001600160a01b031681565b6009546001600160a01b031681565b60008281526001602052604081206115ba908361302b565b9392505050565b60008281526001602052604081206115ba9083613037565b6116057f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6116405760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600e81905561164d612c24565b6001600160a01b03167f25ba333c9a98f8f18bb40ff507a4a1fb423614f442759c754d038a9de3f81cf3826040518082815260200191505060405180910390a250565b600081565b6007546201000090046001600160a01b031681565b60065490565b600e5481565b600c546008546040805163ba86c68360e01b81526001600160a01b0392831660048201529051600093929092169163ba86c68391602480820192602092909190829003018186803b15801561170a57600080fd5b505afa92505050801561172f57506040513d602081101561172a57600080fd5b505160015b610b1c5760405162461bcd60e51b81526004018080602001828103825260408152602001806137cb6040913960400191505060405180910390fd5b60006107a1611786600554600654612c2890919063ffffffff16565b60045490612fd1565b60008181526001602052604081206108689061304c565b7f000000000000000000000000000000000000000000000000000000000000000081565b6117f67f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929610643612c24565b6118315760405162461bcd60e51b81526004018080602001828103825260318152602001806135c56031913960400191505060405180910390fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561187c57600080fd5b505afa158015611890573d6000803e3d6000fd5b505050506040513d60208110156118a657600080fd5b505180156119275750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156118fa57600080fd5b505afa15801561190e573d6000803e3d6000fd5b505050506040513d602081101561192457600080fd5b50515b80156119a65750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561197957600080fd5b505afa15801561198d573d6000803e3d6000fd5b505050506040513d60208110156119a357600080fd5b50515b8015611a255750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156119f857600080fd5b505afa158015611a0c573d6000803e3d6000fd5b505050506040513d6020811015611a2257600080fd5b50515b611a76576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b60075460ff1615611ac3576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b600854604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611b1157600080fd5b505af1158015611b25573d6000803e3d6000fd5b5050600854604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611b7d57600080fd5b505afa158015611b91573d6000803e3d6000fd5b505050506040513d6020811015611ba757600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611bf857600080fd5b505af1158015611c0c573d6000803e3d6000fd5b505050506040513d6020811015611c2257600080fd5b5050600954604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611c7257600080fd5b505af1158015611c86573d6000803e3d6000fd5b5050600954604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611cde57600080fd5b505afa158015611cf2573d6000803e3d6000fd5b505050506040513d6020811015611d0857600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611d5957600080fd5b505af1158015611d6d573d6000803e3d6000fd5b505050506040513d6020811015611d8357600080fd5b5050600a54604080516329605e7760e01b81526001600160a01b038481166004830152915191909216916329605e7791602480830192600092919082900301818387803b158015611dd357600080fd5b505af1158015611de7573d6000803e3d6000fd5b5050600a54604080516370a0823160e01b815230600482015290516001600160a01b03909216935063a9059cbb9250849184916370a08231916024808301926020929190829003018186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d6020811015611e6957600080fd5b5051604080516001600160e01b031960e086901b1681526001600160a01b03909316600484015260248301919091525160448083019260209291908290030181600087803b158015611eba57600080fd5b505af1158015611ece573d6000803e3d6000fd5b505050506040513d6020811015611ee457600080fd5b50506007805460ff191660011790556040516001600160a01b038216907f0caca70b66aed56b0630989a049110023c5a3f37e0ea4b6ce96fc747663f3ebc90600090a250565b600082815260016020526040902060020154611f4890610643612c24565b610a6d5760405162461bcd60e51b81526004018080602001828103825260308152602001806136d16030913960400191505060405180910390fd5b611f8b612dba565b15611fc75760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b611fcf612dd9565b1561200b5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615612058576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b6004544210156120af576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d602081101561212457600080fd5b505180156121a55750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561217857600080fd5b505afa15801561218c573d6000803e3d6000fd5b505050506040513d60208110156121a257600080fd5b50515b80156122245750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b1580156121f757600080fd5b505afa15801561220b573d6000803e3d6000fd5b505050506040513d602081101561222157600080fd5b50515b80156122a35750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561227657600080fd5b505afa15801561228a573d6000803e3d6000fd5b505050506040513d60208110156122a057600080fd5b50515b6122f4576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116123335760405162461bcd60e51b815260040180806020018281038252603381526020018061385b6033913960400191505060405180910390fd5b600061233d6116b6565b90506000612349610a77565b905082821461239f576040805162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20416e7420546f6b656e207072696365206d6f76656400604482015290519081900360640190fd5b8082106123dd5760405162461bcd60e51b815260040180806020018281038252603e815260200180613701603e913960400191505060405180910390fd5b60006123f58261079b85670de0b6b3a7640000612c28565b9050600061240f8261079b88670de0b6b3a7640000612c28565b6008549091506001600160a01b03166379cc679061242b612c24565b886040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b15801561247257600080fd5b505af1158015612486573d6000803e3d6000fd5b50506009546001600160a01b031691506340c10f1990506124a5612c24565b836040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b1580156124ec57600080fd5b505af1158015612500573d6000803e3d6000fd5b5050505061250c612df8565b612514612c24565b6001600160a01b03167fb8b27ae2aaf9a23d923980a0cc97c93dfc2591762f78f9573a4ceba3ea8ba6e3876040518082815260200191505060405180910390a25050436000908152602081815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905550505050565b600a546001600160a01b031681565b6125ac612dba565b156125e85760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b6125f0612dd9565b1561262c5760405162461bcd60e51b81526004018080602001828103825260268152602001806138356026913960400191505060405180910390fd5b60075460ff1615612679576040805162461bcd60e51b8152602060048201526012602482015271151c99585cdd5c9e4e881b5a59dc985d195960721b604482015290519081900360640190fd5b6004544210156126d0576040805162461bcd60e51b815260206004820152601e60248201527f537461727454696d654c6f636b3a206e6f742073746172746564207965740000604482015290519081900360640190fd5b600854604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561271b57600080fd5b505afa15801561272f573d6000803e3d6000fd5b505050506040513d602081101561274557600080fd5b505180156127c65750600954604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561279957600080fd5b505afa1580156127ad573d6000803e3d6000fd5b505050506040513d60208110156127c357600080fd5b50515b80156128455750600a54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561281857600080fd5b505afa15801561282c573d6000803e3d6000fd5b505050506040513d602081101561284257600080fd5b50515b80156128c45750600b54604080516336b87bd760e11b815230600482015290516001600160a01b0390921691636d70f7ae91602480820192602092909190829003018186803b15801561289757600080fd5b505afa1580156128ab573d6000803e3d6000fd5b505050506040513d60208110156128c157600080fd5b50515b612915576040805162461bcd60e51b815260206004820152601e60248201527f54726561737572793a206e656564206d6f7265207065726d697373696f6e0000604482015290519081900360640190fd5b600082116129545760405162461bcd60e51b81526004018080602001828103825260318152602001806137606031913960400191505060405180910390fd5b600061295e6116b6565b90508181146129b4576040805162461bcd60e51b815260206004820152601f60248201527f54726561737572793a20416e7420546f6b656e207072696365206d6f76656400604482015290519081900360640190fd5b6129bc61070f565b81116129f95760405162461bcd60e51b815260040180806020018281038252603e815260200180613701603e913960400191505060405180910390fd5b600854604080516370a0823160e01b8152306004820152905185926001600160a01b0316916370a08231916024808301926020929190829003018186803b158015612a4357600080fd5b505afa158015612a57573d6000803e3d6000fd5b505050506040513d6020811015612a6d57600080fd5b50511015612aac5760405162461bcd60e51b815260040180806020018281038252603e815260200180613587603e913960400191505060405180910390fd5b612ac4612abb600d5485612fbb565b600d5490612e58565b600d556009546001600160a01b03166379cc6790612ae0612c24565b856040518363ffffffff1660e01b815260040180836001600160a01b0316815260200182815260200192505050600060405180830381600087803b158015612b2757600080fd5b505af1158015612b3b573d6000803e3d6000fd5b50505050612b5d612b4a612c24565b6008546001600160a01b03169085613057565b612b65612df8565b612b6d612c24565b6001600160a01b03167f0cee097cf19c478e228383fa90c54c4cdfc970881ae4f7e0dfdb2eaba9b2c48c846040518082815260200191505060405180910390a25050436000908152602081815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905550565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b60006115ba836001600160a01b0384166130c3565b3390565b600082612c3757506000610868565b82820282848281612c4457fe5b04146115ba5760405162461bcd60e51b815260040180806020018281038252602181526020018061373f6021913960400191505060405180910390fd5b6000808211612cd7576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612ce057fe5b049392505050565b6000828152600160205260409020612d009082612c0f565b15610a1257612d0d612c24565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152600160205260409020612d69908261310d565b15610a1257612d76612c24565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b4360009081526020818152604080832032845290915290205460ff1690565b4360009081526020818152604080832033845290915290205460ff1690565b600c60009054906101000a90046001600160a01b03166001600160a01b031663a2e620456040518163ffffffff1660e01b8152600401600060405180830381600087803b158015612e4857600080fd5b505af19250505080156109a35750565b600082821115612eaf576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000612f4b82856001600160a01b031663dd62ed3e30876040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b158015612f1957600080fd5b505afa158015612f2d573d6000803e3d6000fd5b505050506040513d6020811015612f4357600080fd5b505190612fd1565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663095ea7b360e01b179052909150612fb5908590613122565b50505050565b6000818310612fca57816115ba565b5090919050565b6000828201838110156115ba576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b60006115ba83836131d3565b60006115ba836001600160a01b038416613237565b60006108688261324f565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b1790526130be908490613122565b505050565b60006130cf8383613237565b61310557508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610868565b506000610868565b60006115ba836001600160a01b038416613253565b6000613177826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166133199092919063ffffffff16565b8051909150156130be5780806020019051602081101561319657600080fd5b50516130be5760405162461bcd60e51b815260040180806020018281038252602a81526020018061380b602a913960400191505060405180910390fd5b815460009082106132155760405162461bcd60e51b81526004018080602001828103825260228152602001806135366022913960400191505060405180910390fd5b82600001828154811061322457fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b6000818152600183016020526040812054801561330f578354600019808301919081019060009087908390811061328657fe5b90600052602060002001549050808760000184815481106132a357fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806132d357fe5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610868565b6000915050610868565b60606133288484600085613330565b949350505050565b6060824710156133715760405162461bcd60e51b81526004018080602001828103825260268152602001806136ab6026913960400191505060405180910390fd5b61337a8561348b565b6133cb576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b602083106134095780518252601f1990920191602091820191016133ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d806000811461346b576040519150601f19603f3d011682016040523d82523d6000602084013e613470565b606091505b5091509150613480828286613491565b979650505050505050565b3b151590565b606083156134a05750816115ba565b8251156134b05782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b838110156134fa5781810151838201526020016134e2565b50505050905090810190601f1680156135275780820380516001836020036101000a031916815260200191505b509250505060405180910390fdfe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e7454726561737572793a20747265617375727920686173206e6f206d6f72652062756467657420666f7220416e7420426f6e647320726564656d7074696f6e4f70657261746f72416363657373436f6e74726f6c3a2073656e646572207265717569726573207065726d697373696f6e41646d696e416363657373436f6e74726f6c48656c7065723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7241646d696e416363657373436f6e74726f6c48656c7065723a2073656e646572207265717569726573207065726d697373696f6e54726561737572793a206661696c656420746f20636f6e73756c7420416e7420546f6b656e2065787465726e616c2070726963652066726f6d20746865206f7261636c65416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b6554726561737572793a20416e7420546f6b656e207072696365206e6f7420656c696769626c6520666f7220416e7420426f6e6420726564656d7074696f6e536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f7754726561737572793a2063616e6e6f742072656465656d20616e74426f6e64732077697468207a65726f20616d6f756e744f70657261746f72416363657373436f6e74726f6c3a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7254726561737572793a206661696c656420746f20636f6e73756c7420416e7420546f6b656e20737761702070726963652066726f6d20746865206f7261636c655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e54726561737572793a2063616e6e6f7420707572636861736520616e74426f6e64732077697468207a65726f20616d6f756e74416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a164736f6c6343000706000a",
    "devdoc": {
        "kind": "dev",
        "methods": {
            "buyAntBonds(uint256,uint256)": {
                "params": {
                    "amountAntToken": "Amount of Ant Tokens to burn in order to get the bonds",
                    "targetPrice": "Target price at which the bonds will be purchased"
                }
            },
            "getRoleAdmin(bytes32)": {
                "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
            },
            "getRoleMember(bytes32,uint256)": {
                "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
            },
            "getRoleMemberCount(bytes32)": {
                "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
            },
            "grantRole(bytes32,address)": {
                "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "hasRole(bytes32,address)": {
                "details": "Returns `true` if `account` has been granted `role`."
            },
            "redeemAntBonds(uint256,uint256)": {
                "params": {
                    "amountAntBonds": "Amount of Ant Tokens to burn in order to get the bonds",
                    "targetPrice": "Target price at which the bonds will be redeemed"
                }
            },
            "renounceRole(bytes32,address)": {
                "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
            },
            "revokeRole(bytes32,address)": {
                "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
            },
            "tokenPriceCeiling()": {
                "returns": {
                    "_0": "The ceiling price multiplied by 1e18"
                }
            }
        },
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "allocateSeigniorage()": {
                "notice": "Calculates how many new Ant Tokens must be minted to bring the price down to the target price: - If the price is lower than the price celing (target price * 1.05) it does nothing - Fetches the price variation percentage and multiplies the current total supply minus the Treasury allocated tokens by the percentage to obtain the new extra supply to mint - From the new supply a 2% is removed for the Contribution Pool - The Treasury itself gets an amount calculated from the minimum of the new supply and the circulating bonds minus the Treasury current accumulated Seigniorage - Finally the Boardroom gets the rest of the new supply"
            },
            "buyAntBonds(uint256,uint256)": {
                "notice": "Buys Ant Bonds with Ant Tokens Ant Tokens are burned and Ant Bonds are minted to the sender's account in a ratio of 1:(targetPrice/externalPrice)"
            },
            "redeemAntBonds(uint256,uint256)": {
                "notice": "Redeems Ant Bonds for Ant Tokens Ant Bonds are burned and Ant Tokens are transferred to the sender's account in a ratio of 1:1"
            },
            "tokenPriceCeiling()": {
                "notice": "Calculates the ceiling for the token price. This is a 5% more on the actual externally evaluated price of the token"
            }
        },
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 9893,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_status",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
            },
            {
                "astId": 22,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_roles",
                "offset": 0,
                "slot": "1",
                "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
            },
            {
                "astId": 5142,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_admin",
                "offset": 0,
                "slot": "2",
                "type": "t_address"
            },
            {
                "astId": 5279,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_operator",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
            },
            {
                "astId": 10065,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "startTime",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
            },
            {
                "astId": 9974,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_period",
                "offset": 0,
                "slot": "5",
                "type": "t_uint256"
            },
            {
                "astId": 9976,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "_epoch",
                "offset": 0,
                "slot": "6",
                "type": "t_uint256"
            },
            {
                "astId": 7888,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "migrated",
                "offset": 0,
                "slot": "7",
                "type": "t_bool"
            },
            {
                "astId": 7891,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "initialized",
                "offset": 1,
                "slot": "7",
                "type": "t_bool"
            },
            {
                "astId": 7893,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "fund",
                "offset": 2,
                "slot": "7",
                "type": "t_address"
            },
            {
                "astId": 7895,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "antToken",
                "offset": 0,
                "slot": "8",
                "type": "t_address"
            },
            {
                "astId": 7897,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "antBond",
                "offset": 0,
                "slot": "9",
                "type": "t_address"
            },
            {
                "astId": 7899,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "antShare",
                "offset": 0,
                "slot": "10",
                "type": "t_address"
            },
            {
                "astId": 7901,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "boardroom",
                "offset": 0,
                "slot": "11",
                "type": "t_address"
            },
            {
                "astId": 7903,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "oracle",
                "offset": 0,
                "slot": "12",
                "type": "t_contract(IOracle)7648"
            },
            {
                "astId": 7906,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "accumulatedSeigniorage",
                "offset": 0,
                "slot": "13",
                "type": "t_uint256"
            },
            {
                "astId": 7909,
                "contract": "contracts/governance/Treasury.sol:Treasury",
                "label": "fundAllocationRate",
                "offset": 0,
                "slot": "14",
                "type": "t_uint256"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_bytes32)dyn_storage": {
                "base": "t_bytes32",
                "encoding": "dynamic_array",
                "label": "bytes32[]",
                "numberOfBytes": "32"
            },
            "t_bool": {
                "encoding": "inplace",
                "label": "bool",
                "numberOfBytes": "1"
            },
            "t_bytes32": {
                "encoding": "inplace",
                "label": "bytes32",
                "numberOfBytes": "32"
            },
            "t_contract(IOracle)7648": {
                "encoding": "inplace",
                "label": "contract IOracle",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_bool)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => bool)",
                "numberOfBytes": "32",
                "value": "t_bool"
            },
            "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => struct AccessControl.RoleData)",
                "numberOfBytes": "32",
                "value": "t_struct(RoleData)18_storage"
            },
            "t_mapping(t_bytes32,t_uint256)": {
                "encoding": "mapping",
                "key": "t_bytes32",
                "label": "mapping(bytes32 => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
                "encoding": "mapping",
                "key": "t_uint256",
                "label": "mapping(uint256 => mapping(address => bool))",
                "numberOfBytes": "32",
                "value": "t_mapping(t_address,t_bool)"
            },
            "t_struct(AddressSet)3146_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.AddressSet",
                "members": [
                    {
                        "astId": 3145,
                        "contract": "contracts/governance/Treasury.sol:Treasury",
                        "label": "_inner",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(Set)2881_storage"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_struct(RoleData)18_storage": {
                "encoding": "inplace",
                "label": "struct AccessControl.RoleData",
                "members": [
                    {
                        "astId": 15,
                        "contract": "contracts/governance/Treasury.sol:Treasury",
                        "label": "members",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_struct(AddressSet)3146_storage"
                    },
                    {
                        "astId": 17,
                        "contract": "contracts/governance/Treasury.sol:Treasury",
                        "label": "adminRole",
                        "offset": 0,
                        "slot": "2",
                        "type": "t_bytes32"
                    }
                ],
                "numberOfBytes": "96"
            },
            "t_struct(Set)2881_storage": {
                "encoding": "inplace",
                "label": "struct EnumerableSet.Set",
                "members": [
                    {
                        "astId": 2876,
                        "contract": "contracts/governance/Treasury.sol:Treasury",
                        "label": "_values",
                        "offset": 0,
                        "slot": "0",
                        "type": "t_array(t_bytes32)dyn_storage"
                    },
                    {
                        "astId": 2880,
                        "contract": "contracts/governance/Treasury.sol:Treasury",
                        "label": "_indexes",
                        "offset": 0,
                        "slot": "1",
                        "type": "t_mapping(t_bytes32,t_uint256)"
                    }
                ],
                "numberOfBytes": "64"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
