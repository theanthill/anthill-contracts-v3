{
  "address": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "stakingToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OPERATOR_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "adminAccessRole",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "allocateSeigniorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "director",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "director",
          "type": "address"
        }
      ],
      "name": "getLastSnapshotIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isAdmin",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "isOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestSnapshotIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "transferAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOperator",
          "type": "address"
        }
      ],
      "name": "transferOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
  "receipt": {
    "to": null,
    "from": "0xc892cfd3e75Cf428BDD25576e9a42D515697B2C7",
    "contractAddress": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
    "transactionIndex": 0,
    "gasUsed": "2213180",
    "logsBloom": "0x
    "blockHash": "0x9507a7bd79f1a1945b9b257a40f357b02923fc29ddd62c3e94190f6d91613afa",
    "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 9302063,
        "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
        "address": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x9507a7bd79f1a1945b9b257a40f357b02923fc29ddd62c3e94190f6d91613afa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9302063,
        "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
        "address": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
          "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7",
          "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x9507a7bd79f1a1945b9b257a40f357b02923fc29ddd62c3e94190f6d91613afa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9302063,
        "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
        "address": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
        "topics": [
          "0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0xa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0x9507a7bd79f1a1945b9b257a40f357b02923fc29ddd62c3e94190f6d91613afa"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 9302063,
        "transactionHash": "0x342e55d57db783a6576ab3487a8e8c1b6908655d45fea3a88f5da9ee38b92b25",
        "address": "0xA54CB13A91fcc2765514Fd188CeFe995cEf41D5A",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929",
          "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7",
          "0x000000000000000000000000c892cfd3e75cf428bdd25576e9a42d515697b2c7"
        ],
        "data": "0x",
        "logIndex": 3,
        "blockHash": "0x9507a7bd79f1a1945b9b257a40f357b02923fc29ddd62c3e94190f6d91613afa"
      }
    ],
    "blockNumber": 9302063,
    "cumulativeGasUsed": "2213180",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x95Cdc9577C2cf59a87c6050cFcafFDa9eB55c4c1",
    "0x98A629aE103687a3c2C1c16c5C63Ed64Ab3a877c"
  ],
  "solcInputHash": "c6a017f0d032251aba4881a80aaffb4a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"adminAccessRole\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"allocateSeigniorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"director\",\"type\":\"address\"}],\"name\":\"getLastSnapshotIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isAdmin\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestSnapshotIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"transferAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOperator\",\"type\":\"address\"}],\"name\":\"transferOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"balanceOf(address)\":{\"params\":{\"account\":\"Account for which the balance is requested\"}},\"exit()\":{\"returns\":{\"_0\":\"The amount of LP tokens withdrawn\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"stake(uint256)\":{\"params\":{\"amount\":\"Amount of LP tokens to stake\"}},\"withdraw(uint256)\":{\"params\":{\"amount\":\"Amount of LP tokens to be withdrawn\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the current balance of the given account\"},\"exit()\":{\"notice\":\"Exiting for the message sender. It performs a withdraw of all the staked tokens. The caller will receive the LP tokens to be withdrawn This method can only be called by the contract operator\"},\"stake(uint256)\":{\"notice\":\"Staking for the message sender. The caller holds the LP tokens to be staked This method can only be called by the contract operator\"},\"totalSupply()\":{\"notice\":\"Returns the total supply of LP tokens staked in the contract\"},\"withdraw(uint256)\":{\"notice\":\"Withdrawal for the message sender The caller will receive the LP tokens to be withdrawn This method can only be called by the contract operator\"}},\"notice\":\"Baordroom contract where the share holders can stake their _token Shares in exchange of rewards in _token Tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/governance/Boardroom.sol\":\"Boardroom\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf12dfbe97e6276980b83d2830bb0eb75e0cf4f3e626c2471137f82158ae6a0fc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\",\"license\":\"MIT\"},\"contracts/access/AdminAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Admin access to certain functions of a contract\\n */\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IAdminAccessControl {\\n    function isAdmin(address account) external view returns (bool);\\n\\n    function transferAdmin(address newAdmin) external;\\n}\\n\\n/**\\n    Helper to provide some utils for contracts using an admin role,\\n    like TimelockController\\n */\\nabstract contract AdminAccessControlHelper is AccessControl {\\n    bytes32 public immutable adminAccessRole;\\n\\n    address private _admin;\\n\\n    constructor(bytes32 adminRoleID, address adminAddress) {\\n        adminAccessRole = adminRoleID;\\n\\n        _admin = adminAddress;\\n    }\\n\\n    // ==== MODIFIERS ====\\n    modifier onlyAdmin() {\\n        require(hasRole(adminAccessRole, _msgSender()), \\\"AdminAccessControlHelper: sender requires permission\\\");\\n        _;\\n    }\\n\\n    // ==== VIEWS ====\\n    function isAdmin(address account) external view returns (bool) {\\n        return hasRole(adminAccessRole, account);\\n    }\\n\\n    // ==== MUTABLES ====\\n    function transferAdmin(address newAdmin) external onlyAdmin {\\n        require(newAdmin != address(0), \\\"AdminAccessControlHelper: zero address given for new operator\\\");\\n\\n        grantRole(adminAccessRole, newAdmin);\\n        revokeRole(adminAccessRole, _admin);\\n\\n        _admin = newAdmin;\\n    }\\n}\\n\\n/**\\n    Access control contract with pre-defined admin role\\n */\\nabstract contract AdminAccessControl is AdminAccessControlHelper {\\n    bytes32 public constant ADMIN_ROLE = keccak256(\\\"ADMIN_ROLE\\\");\\n\\n    constructor() AdminAccessControlHelper(ADMIN_ROLE, _msgSender()) {\\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\\n\\n        _setupRole(ADMIN_ROLE, _msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x00edc4f33957ec68d4cc2ed097563a15373e239d4a4a720ad24868f6a801eb9b\",\"license\":\"MIT\"},\"contracts/access/OperatorAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\nimport \\\"./AdminAccessControl.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IOperatorAccessControl {\\n    function isOperator(address account) external view returns (bool);\\n\\n    function transferOperator(address newOperator) external;\\n\\n    function transferAdmin(address newAdmin) external;\\n}\\n\\n/**\\n    Basic access control for a contract that defines an Admin and an Operator roles\\n\\n        - Admin can transfer the Operator to a new account or add new Operator\\n        - Operator can perform calls to all functiones marked as onlyOperator()\\n */\\nabstract contract OperatorAccessControl is AdminAccessControl {\\n    bytes32 public constant OPERATOR_ROLE = keccak256(\\\"OPERATOR_ROLE\\\");\\n\\n    address private _operator;\\n\\n    // ==== CONSTRUCTOR ====\\n    constructor() {\\n        _setRoleAdmin(OPERATOR_ROLE, ADMIN_ROLE);\\n\\n        _operator = _msgSender();\\n\\n        _setupRole(OPERATOR_ROLE, _operator);\\n    }\\n\\n    // ==== MODIFIERS ====\\n    modifier onlyOperator() {\\n        require(hasRole(OPERATOR_ROLE, _msgSender()), \\\"OperatorAccessControl: sender requires permission\\\");\\n        _;\\n    }\\n\\n    // ==== VIEWS ====\\n    function isOperator(address account) external view returns (bool) {\\n        return hasRole(OPERATOR_ROLE, account);\\n    }\\n\\n    // ==== MUTABLES ====\\n    function transferOperator(address newOperator) external onlyAdmin {\\n        require(newOperator != address(0), \\\"OperatorAccessControl: zero address given for new operator\\\");\\n\\n        revokeRole(OPERATOR_ROLE, _operator);\\n\\n        _operator = newOperator;\\n\\n        grantRole(OPERATOR_ROLE, newOperator);\\n    }\\n}\\n\",\"keccak256\":\"0x78a11568c5c5d4dee7b5570a7e739749edcc258645029c71ac3bfcc5a52e9268\",\"license\":\"MIT\"},\"contracts/core/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Generic LP Token Pool\\n*/\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/**\\n    Interface\\n*/\\ninterface IStakingPool {\\n    function stake(uint256 amount) external;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function exit() external returns (uint256);\\n}\\n\\n/**\\n    Contract\\n */\\ncontract StakingPool is Context {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public token;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n    constructor(IERC20 token_) {\\n        token = token_;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    /**\\n        Returns the total supply of LP tokens staked in the contract\\n    */\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n        Returns the current balance of the given account\\n\\n        @param account Account for which the balance is requested\\n    */\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /* ========== MUTABLES ========== */\\n\\n    /**\\n        Staking for the message sender. The caller holds the\\n        LP tokens to be staked\\n\\n        This method can only be called by the contract operator\\n\\n        @param amount Amount of LP tokens to stake\\n    */\\n    function stake(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].add(amount);\\n\\n        token.safeTransferFrom(_msgSender(), address(this), amount);\\n    }\\n\\n    /**\\n        Withdrawal for the message sender The caller will receive the\\n        LP tokens to be withdrawn\\n\\n        This method can only be called by the contract operator\\n        \\n        @param amount Amount of LP tokens to be withdrawn\\n    */\\n    function withdraw(uint256 amount) public virtual {\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[_msgSender()] = _balances[_msgSender()].sub(amount);\\n\\n        token.safeTransfer(_msgSender(), amount);\\n    }\\n\\n    /**\\n        Exiting for the message sender. It performs a withdraw of all\\n        the staked tokens. The caller will receive the LP tokens to be withdrawn\\n\\n        This method can only be called by the contract operator\\n        \\n        @return The amount of LP tokens withdrawn\\n    */\\n    function exit() public virtual returns (uint256) {\\n        uint256 balance = balanceOf(_msgSender());\\n        withdraw(balance);\\n        return balance;\\n    }\\n}\\n\",\"keccak256\":\"0x660bec5c13b1ba5cd077400348e6c7e0d801bee800b9db527bcde892de2c40a7\",\"license\":\"MIT\"},\"contracts/governance/Boardroom.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\n/**\\n    Boardroom for staking of the _tokenShares and earning rewards during inflationary periods\\n */\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\nimport \\\"../access/OperatorAccessControl.sol\\\";\\nimport \\\"../utils/ContractGuard.sol\\\";\\nimport \\\"../core/StakingPool.sol\\\";\\n\\n/**\\n    Interface\\n */\\ninterface IBoardroom {\\n    function allocateSeigniorage(uint256 amount) external;\\n}\\n\\n/**\\n    Baordroom contract where the share holders can stake their _token Shares in exchange of\\n    rewards in _token Tokens\\n */\\ncontract Boardroom is StakingPool, OperatorAccessControl, ContractGuard {\\n    using SafeERC20 for IERC20;\\n    using Address for address;\\n    using SafeMath for uint256;\\n\\n    /* ========== DATA STRUCTURES ========== */\\n\\n    struct Boardseat {\\n        uint256 lastSnapshotIndex;\\n        uint256 rewardEarned;\\n    }\\n\\n    struct BoardSnapshot {\\n        uint256 time;\\n        uint256 rewardReceived;\\n        uint256 rewardPerShare;\\n    }\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IERC20 private _token;\\n\\n    mapping(address => Boardseat) private directors;\\n    BoardSnapshot[] private boardHistory;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(IERC20 token, IERC20 stakingToken) StakingPool(stakingToken) {\\n        _token = token;\\n\\n        BoardSnapshot memory genesisSnapshot = BoardSnapshot({\\n            time: block.number,\\n            rewardReceived: 0,\\n            rewardPerShare: 0\\n        });\\n        boardHistory.push(genesisSnapshot);\\n    }\\n\\n    /* ========== Modifiers =============== */\\n    modifier directorExists {\\n        require(balanceOf(_msgSender()) > 0, \\\"Boardroom: The director does not exist\\\");\\n        _;\\n    }\\n\\n    modifier updateReward(address director) {\\n        if (director != address(0)) {\\n            Boardseat memory seat = directors[director];\\n            seat.rewardEarned = earned(director);\\n            seat.lastSnapshotIndex = latestSnapshotIndex();\\n            directors[director] = seat;\\n        }\\n        _;\\n    }\\n\\n    /* ========== VIEW FUNCTIONS ========== */\\n\\n    // =========== Snapshot getters\\n\\n    function latestSnapshotIndex() public view returns (uint256) {\\n        return boardHistory.length.sub(1);\\n    }\\n\\n    function getLatestSnapshot() internal view returns (BoardSnapshot memory) {\\n        return boardHistory[latestSnapshotIndex()];\\n    }\\n\\n    function getLastSnapshotIndexOf(address director) public view returns (uint256) {\\n        return directors[director].lastSnapshotIndex;\\n    }\\n\\n    function getLastSnapshotOf(address director) internal view returns (BoardSnapshot memory) {\\n        return boardHistory[getLastSnapshotIndexOf(director)];\\n    }\\n\\n    // =========== Director getters\\n\\n    function rewardPerShare() public view returns (uint256) {\\n        return getLatestSnapshot().rewardPerShare;\\n    }\\n\\n    function earned(address director) public view returns (uint256) {\\n        uint256 latestRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 storedRPS = getLastSnapshotOf(director).rewardPerShare;\\n\\n        return balanceOf(director).mul(latestRPS.sub(storedRPS)).div(1e18).add(directors[director].rewardEarned);\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n    function stake(uint256 amount) public override onlyOneBlock updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Boardroom: Cannot stake 0\\\");\\n        super.stake(amount);\\n        emit Staked(_msgSender(), amount);\\n    }\\n\\n    function withdraw(uint256 amount) public override onlyOneBlock directorExists updateReward(_msgSender()) {\\n        require(amount > 0, \\\"Boardroom: Cannot withdraw 0\\\");\\n        super.withdraw(amount);\\n        emit Withdrawn(_msgSender(), amount);\\n    }\\n\\n    function exit() public override onlyOneBlock directorExists updateReward(_msgSender()) returns (uint256) {\\n        uint256 lpTokensAmount = super.exit();\\n        claimReward();\\n        return lpTokensAmount;\\n    }\\n\\n    function claimReward() public updateReward(_msgSender()) {\\n        uint256 reward = directors[_msgSender()].rewardEarned;\\n        if (reward > 0) {\\n            directors[_msgSender()].rewardEarned = 0;\\n            _token.safeTransfer(_msgSender(), reward);\\n            emit RewardPaid(_msgSender(), reward);\\n        }\\n    }\\n\\n    function allocateSeigniorage(uint256 amount) external onlyOneBlock onlyOperator {\\n        require(amount > 0, \\\"Boardroom: Cannot allocate 0\\\");\\n        require(totalSupply() > 0, \\\"Boardroom: Cannot allocate when totalSupply is 0\\\");\\n\\n        // Create & add new snapshot\\n        uint256 prevRPS = getLatestSnapshot().rewardPerShare;\\n        uint256 nextRPS = prevRPS.add(amount.mul(1e18).div(totalSupply()));\\n\\n        BoardSnapshot memory newSnapshot = BoardSnapshot({\\n            time: block.number,\\n            rewardReceived: amount,\\n            rewardPerShare: nextRPS\\n        });\\n        boardHistory.push(newSnapshot);\\n\\n        _token.safeTransferFrom(_msgSender(), address(this), amount);\\n\\n        emit RewardAdded(_msgSender(), amount);\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardAdded(address indexed user, uint256 reward);\\n}\\n\",\"keccak256\":\"0x23b47aad2d1962298758b019fb670d98cf4acb05177e97168fa48fa559286331\",\"license\":\"MIT\"},\"contracts/utils/ContractGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.7.6;\\n\\ncontract ContractGuard {\\n    mapping(uint256 => mapping(address => bool)) private _status;\\n\\n    function checkSameOriginReentranted() internal view returns (bool) {\\n        // resolution: 1 / 2**112\\n        /* solhint-disable-next-line avoid-tx-origin */\\n        return _status[block.number][tx.origin];\\n    }\\n\\n    function checkSameSenderReentranted() internal view returns (bool) {\\n        return _status[block.number][msg.sender];\\n    }\\n\\n    modifier onlyOneBlock() {\\n        require(!checkSameOriginReentranted(), \\\"ContractGuard: one block, one function\\\");\\n        require(!checkSameSenderReentranted(), \\\"ContractGuard: one block, one function\\\");\\n\\n        _;\\n\\n        /* solhint-disable-next-line avoid-tx-origin */\\n        _status[block.number][tx.origin] = true;\\n        _status[block.number][msg.sender] = true;\\n    }\\n}\\n\",\"keccak256\":\"0x9c8a40c6a3cedc19d0e3235220c00a426518468cab5a513b8ca485d17d9563b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620024d6380380620024d6833981810160405260408110156200003757600080fd5b508051602090910151600080516020620024b68339815191526200005a62000203565b600080546001600160a01b038086166001600160a01b031992831617909255608093909352600480549290911691909216179055620000a9600080516020620024b68339815191528062000207565b620000cd600080516020620024b6833981519152620000c762000203565b62000259565b620000f760008051602062002496833981519152600080516020620024b683398151915262000207565b6200010162000203565b600580546001600160a01b0319166001600160a01b0392831617908190556200013c9160008051602062002496833981519152911662000259565b50600780546001600160a01b0319166001600160a01b03929092169190911790556040805160608101825243815260006020820181815292820181815260098054600181018255925291517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60039092029182015591517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0830155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b1909101556200036b565b3390565b600082815260036020526040808220600201549051839285917fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff9190a460009182526003602052604090912060020155565b62000265828262000269565b5050565b600082815260036020908152604090912062000290918390620014cb620002e4821b17901c565b156200026557620002a062000203565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000620002fb836001600160a01b03841662000304565b90505b92915050565b600062000312838362000353565b6200034a57508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155620002fe565b506000620002fe565b60009081526001919091016020526040902054151590565b6080516120f76200039f60003980610548528061058652806105b65280610a895280610b355280610b6352506120f76000f3fe608060405234801561001057600080fd5b50600436106101b85760003560e01c8063714b4658116100f9578063a694fc3a11610097578063d547741f11610071578063d547741f1461047b578063e9fad8ee146104a7578063f5b541a6146104af578063fc0c546a146104b7576101b8565b8063a694fc3a14610439578063b88a802f14610456578063ca15c8731461045e576101b8565b80639010d07c116100d35780639010d07c146103a957806391d14854146103e857806397ffe1d714610414578063a217fddf14610431576101b8565b8063714b46581461035557806375829def1461037b57806375b238fc146103a1576101b8565b80632e1a7d4d116101665780633f9e3f04116101405780633f9e3f04146102f9578063446a2ec8146103015780636d70f7ae1461030957806370a082311461032f576101b8565b80632e1a7d4d146102845780632f2ff15d146102a157806336568abe146102cd576101b8565b8063248a9ca311610197578063248a9ca31461020557806324d7806c1461022257806329605e771461025c576101b8565b80628cc262146101bd57806318160ddd146101f55780632140dcf1146101fd575b600080fd5b6101e3600480360360208110156101d357600080fd5b50356001600160a01b03166104bf565b60408051918252519081900360200190f35b6101e3610540565b6101e3610546565b6101e36004803603602081101561021b57600080fd5b503561056a565b6102486004803603602081101561023857600080fd5b50356001600160a01b031661057f565b604080519115158252519081900360200190f35b6102826004803603602081101561027257600080fd5b50356001600160a01b03166105b1565b005b6102826004803603602081101561029a57600080fd5b50356106ee565b610282600480360360408110156102b757600080fd5b50803590602001356001600160a01b0316610931565b610282600480360360408110156102e357600080fd5b50803590602001356001600160a01b0316610998565b6101e36109f9565b6101e3610a0f565b6102486004803603602081101561031f57600080fd5b50356001600160a01b0316610a22565b6101e36004803603602081101561034557600080fd5b50356001600160a01b0316610a4e565b6101e36004803603602081101561036b57600080fd5b50356001600160a01b0316610a69565b6102826004803603602081101561039157600080fd5b50356001600160a01b0316610a84565b6101e3610bc0565b6103cc600480360360408110156103bf57600080fd5b5080359060200135610be4565b604080516001600160a01b039092168252519081900360200190f35b610248600480360360408110156103fe57600080fd5b50803590602001356001600160a01b0316610c03565b6102826004803603602081101561042a57600080fd5b5035610c1b565b6101e3610f2e565b6102826004803603602081101561044f57600080fd5b5035610f33565b610282611128565b6101e36004803603602081101561047457600080fd5b5035611278565b6102826004803603604081101561049157600080fd5b50803590602001356001600160a01b031661128f565b6101e36112e8565b6101e3611498565b6103cc6114bc565b6000806104ca6114e0565b60400151905060006104db84611538565b6040908101516001600160a01b03861660009081526008602052919091206001015490915061053890610532670de0b6b3a764000061052c61051d8787611593565b6105268a610a4e565b906115f0565b90611649565b906116b0565b949350505050565b60015490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60009081526003602052604090206002015490565b60006105ab7f000000000000000000000000000000000000000000000000000000000000000083610c03565b92915050565b6105e27f00000000000000000000000000000000000000000000000000000000000000006105dd61170a565b610c03565b61061d5760405162461bcd60e51b8152600401808060200182810382526034815260200180611f576034913960400191505060405180910390fd5b6001600160a01b0381166106625760405162461bcd60e51b815260040180806020018281038252603a81526020018061200c603a913960400191505060405180910390fd5b600554610699907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929906001600160a01b031661128f565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556106eb7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92982610931565b50565b6106f661170e565b156107325760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b61073a61172f565b156107765760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b600061078861078361170a565b610a4e565b116107c45760405162461bcd60e51b81526004018080602001828103825260268152602001806120466026913960400191505060405180910390fd5b6107cc61170a565b6001600160a01b0381161561084c576001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152610814826104bf565b60208201526108216109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b600082116108a1576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b6108aa82611750565b6108b261170a565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b60008281526003602052604090206002015461094f906105dd61170a565b61098a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611eba602f913960400191505060405180910390fd5b61099482826117d4565b5050565b6109a061170a565b6001600160a01b0316816001600160a01b0316146109ef5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120bc602f913960400191505060405180910390fd5b610994828261183d565b600954600090610a0a906001611593565b905090565b6000610a196114e0565b60400151905090565b60006105ab7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92983610c03565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b031660009081526008602052604090205490565b610ab07f00000000000000000000000000000000000000000000000000000000000000006105dd61170a565b610aeb5760405162461bcd60e51b8152600401808060200182810382526034815260200180611f576034913960400191505060405180910390fd5b6001600160a01b038116610b305760405162461bcd60e51b815260040180806020018281038252603d815260200180611f1a603d913960400191505060405180910390fd5b610b5a7f000000000000000000000000000000000000000000000000000000000000000082610931565b600454610b91907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031661128f565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000828152600360205260408120610bfc90836118a6565b9392505050565b6000828152600360205260408120610bfc90836118b2565b610c2361170e565b15610c5f5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610c6761172f565b15610ca35760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610ccf7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9296105dd61170a565b610d0a5760405162461bcd60e51b8152600401808060200182810382526031815260200180611ee96031913960400191505060405180910390fd5b60008111610d5f576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b6000610d69610540565b11610da55760405162461bcd60e51b8152600401808060200182810382526030815260200180611fbb6030913960400191505060405180910390fd5b6000610daf6114e0565b6040015190506000610dde610dd7610dc5610540565b61052c86670de0b6b3a76400006115f0565b83906116b0565b60408051606081018252438152602081018681529181018381526009805460018101825560009190915282517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60039092029182015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0840155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b190920191909155909150610ea5610e9161170a565b6007546001600160a01b03169030876118c7565b610ead61170a565b6001600160a01b03167fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29856040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050565b600081565b610f3b61170e565b15610f775760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610f7f61172f565b15610fbb5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610fc361170a565b6001600160a01b03811615611043576001600160a01b038116600090815260086020908152604091829020825180840190935280548352600101549082015261100b826104bf565b60208201526110186109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b60008211611098576040805162461bcd60e51b815260206004820152601960248201527f426f617264726f6f6d3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6110a18261193c565b6110a961170a565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b61113061170a565b6001600160a01b038116156111b0576001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152611178826104bf565b60208201526111856109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b6000600860006111be61170a565b6001600160a01b0316815260208101919091526040016000206001015490508015610994576000600860006111f161170a565b6001600160a01b0316815260208101919091526040016000206001015561122c61121961170a565b6007546001600160a01b031690836119c1565b61123461170a565b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25050565b60008181526003602052604081206105ab90611a2d565b6000828152600360205260409020600201546112ad906105dd61170a565b6109ef5760405162461bcd60e51b8152600401808060200182810382526030815260200180611f8b6030913960400191505060405180910390fd5b60006112f261170e565b1561132e5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b61133661172f565b156113725760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b600061137f61078361170a565b116113bb5760405162461bcd60e51b81526004018080602001828103825260268152602001806120466026913960400191505060405180910390fd5b6113c361170a565b6001600160a01b03811615611443576001600160a01b038116600090815260086020908152604091829020825180840190935280548352600101549082015261140b826104bf565b60208201526114186109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b600061144d611a38565b9050611457611128565b4360009081526006602090815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905592915050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6000546001600160a01b031681565b6000610bfc836001600160a01b038416611a51565b6114e8611e76565b60096114f26109f9565b815481106114fc57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611540611e76565b600961154b83610a69565b8154811061155557fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b6000828211156115ea576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826115ff575060006105ab565b8282028284828161160c57fe5b0414610bfc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611feb6021913960400191505060405180910390fd5b600080821161169f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116a857fe5b049392505050565b600082820183811015610bfc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b43600090815260066020908152604080832032845290915290205460ff1690565b43600090815260066020908152604080832033845290915290205460ff1690565b60015461175d9082611593565b600155611790816002600061177061170a565b6001600160a01b0316815260208101919091526040016000205490611593565b6002600061179c61170a565b6001600160a01b031681526020810191909152604001600020556106eb6117c161170a565b6000546001600160a01b031690836119c1565b60008281526003602052604090206117ec90826114cb565b15610994576117f961170a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526003602052604090206118559082611a9b565b156109945761186261170a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610bfc8383611ab0565b6000610bfc836001600160a01b038416611b14565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052611936908590611b2c565b50505050565b60015461194990826116b0565b60015561197c816002600061195c61170a565b6001600160a01b03168152602081019190915260400160002054906116b0565b6002600061198861170a565b6001600160a01b031681526020810191909152604001600020556106eb6119ad61170a565b6000546001600160a01b03169030846118c7565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611a28908490611b2c565b505050565b60006105ab82611bdd565b600080611a4661078361170a565b9050610a0a816106ee565b6000611a5d8383611b14565b611a93575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ab565b5060006105ab565b6000610bfc836001600160a01b038416611be1565b81546000908210611af25760405162461bcd60e51b8152600401808060200182810382526022815260200180611e986022913960400191505060405180910390fd5b826000018281548110611b0157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b6000611b81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ca79092919063ffffffff16565b805190915015611a2857808060200190516020811015611ba057600080fd5b5051611a285760405162461bcd60e51b815260040180806020018281038252602a81526020018061206c602a913960400191505060405180910390fd5b5490565b60008181526001830160205260408120548015611c9d5783546000198083019190810190600090879083908110611c1457fe5b9060005260206000200154905080876000018481548110611c3157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611c6157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105ab565b60009150506105ab565b6060610538848460008585611cbb85611dcc565b611d0c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611d4a5780518252601f199092019160209182019101611d2b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611dac576040519150601f19603f3d011682016040523d82523d6000602084013e611db1565b606091505b5091509150611dc1828286611dd2565b979650505050505050565b3b151590565b60608315611de1575081610bfc565b825115611df15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e3b578181015183820152602001611e23565b50505050905090810190601f168015611e685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744f70657261746f72416363657373436f6e74726f6c3a2073656e646572207265717569726573207065726d697373696f6e41646d696e416363657373436f6e74726f6c48656c7065723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7241646d696e416363657373436f6e74726f6c48656c7065723a2073656e646572207265717569726573207065726d697373696f6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c792069732030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f70657261746f72416363657373436f6e74726f6c3a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72426f617264726f6f6d3a20546865206469726563746f7220646f6573206e6f742065786973745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a164736f6c6343000706000a97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929a49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c21775",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101b85760003560e01c8063714b4658116100f9578063a694fc3a11610097578063d547741f11610071578063d547741f1461047b578063e9fad8ee146104a7578063f5b541a6146104af578063fc0c546a146104b7576101b8565b8063a694fc3a14610439578063b88a802f14610456578063ca15c8731461045e576101b8565b80639010d07c116100d35780639010d07c146103a957806391d14854146103e857806397ffe1d714610414578063a217fddf14610431576101b8565b8063714b46581461035557806375829def1461037b57806375b238fc146103a1576101b8565b80632e1a7d4d116101665780633f9e3f04116101405780633f9e3f04146102f9578063446a2ec8146103015780636d70f7ae1461030957806370a082311461032f576101b8565b80632e1a7d4d146102845780632f2ff15d146102a157806336568abe146102cd576101b8565b8063248a9ca311610197578063248a9ca31461020557806324d7806c1461022257806329605e771461025c576101b8565b80628cc262146101bd57806318160ddd146101f55780632140dcf1146101fd575b600080fd5b6101e3600480360360208110156101d357600080fd5b50356001600160a01b03166104bf565b60408051918252519081900360200190f35b6101e3610540565b6101e3610546565b6101e36004803603602081101561021b57600080fd5b503561056a565b6102486004803603602081101561023857600080fd5b50356001600160a01b031661057f565b604080519115158252519081900360200190f35b6102826004803603602081101561027257600080fd5b50356001600160a01b03166105b1565b005b6102826004803603602081101561029a57600080fd5b50356106ee565b610282600480360360408110156102b757600080fd5b50803590602001356001600160a01b0316610931565b610282600480360360408110156102e357600080fd5b50803590602001356001600160a01b0316610998565b6101e36109f9565b6101e3610a0f565b6102486004803603602081101561031f57600080fd5b50356001600160a01b0316610a22565b6101e36004803603602081101561034557600080fd5b50356001600160a01b0316610a4e565b6101e36004803603602081101561036b57600080fd5b50356001600160a01b0316610a69565b6102826004803603602081101561039157600080fd5b50356001600160a01b0316610a84565b6101e3610bc0565b6103cc600480360360408110156103bf57600080fd5b5080359060200135610be4565b604080516001600160a01b039092168252519081900360200190f35b610248600480360360408110156103fe57600080fd5b50803590602001356001600160a01b0316610c03565b6102826004803603602081101561042a57600080fd5b5035610c1b565b6101e3610f2e565b6102826004803603602081101561044f57600080fd5b5035610f33565b610282611128565b6101e36004803603602081101561047457600080fd5b5035611278565b6102826004803603604081101561049157600080fd5b50803590602001356001600160a01b031661128f565b6101e36112e8565b6101e3611498565b6103cc6114bc565b6000806104ca6114e0565b60400151905060006104db84611538565b6040908101516001600160a01b03861660009081526008602052919091206001015490915061053890610532670de0b6b3a764000061052c61051d8787611593565b6105268a610a4e565b906115f0565b90611649565b906116b0565b949350505050565b60015490565b7f000000000000000000000000000000000000000000000000000000000000000081565b60009081526003602052604090206002015490565b60006105ab7f000000000000000000000000000000000000000000000000000000000000000083610c03565b92915050565b6105e27f00000000000000000000000000000000000000000000000000000000000000006105dd61170a565b610c03565b61061d5760405162461bcd60e51b8152600401808060200182810382526034815260200180611f576034913960400191505060405180910390fd5b6001600160a01b0381166106625760405162461bcd60e51b815260040180806020018281038252603a81526020018061200c603a913960400191505060405180910390fd5b600554610699907f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b929906001600160a01b031661128f565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383161790556106eb7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92982610931565b50565b6106f661170e565b156107325760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b61073a61172f565b156107765760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b600061078861078361170a565b610a4e565b116107c45760405162461bcd60e51b81526004018080602001828103825260268152602001806120466026913960400191505060405180910390fd5b6107cc61170a565b6001600160a01b0381161561084c576001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152610814826104bf565b60208201526108216109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b600082116108a1576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f74207769746864726177203000000000604482015290519081900360640190fd5b6108aa82611750565b6108b261170a565b6001600160a01b03167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5836040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b60008281526003602052604090206002015461094f906105dd61170a565b61098a5760405162461bcd60e51b815260040180806020018281038252602f815260200180611eba602f913960400191505060405180910390fd5b61099482826117d4565b5050565b6109a061170a565b6001600160a01b0316816001600160a01b0316146109ef5760405162461bcd60e51b815260040180806020018281038252602f8152602001806120bc602f913960400191505060405180910390fd5b610994828261183d565b600954600090610a0a906001611593565b905090565b6000610a196114e0565b60400151905090565b60006105ab7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92983610c03565b6001600160a01b031660009081526002602052604090205490565b6001600160a01b031660009081526008602052604090205490565b610ab07f00000000000000000000000000000000000000000000000000000000000000006105dd61170a565b610aeb5760405162461bcd60e51b8152600401808060200182810382526034815260200180611f576034913960400191505060405180910390fd5b6001600160a01b038116610b305760405162461bcd60e51b815260040180806020018281038252603d815260200180611f1a603d913960400191505060405180910390fd5b610b5a7f000000000000000000000000000000000000000000000000000000000000000082610931565b600454610b91907f0000000000000000000000000000000000000000000000000000000000000000906001600160a01b031661128f565b6004805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b7fa49807205ce4d355092ef5a8a18f56e8913cf4a201fbe287825b095693c2177581565b6000828152600360205260408120610bfc90836118a6565b9392505050565b6000828152600360205260408120610bfc90836118b2565b610c2361170e565b15610c5f5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610c6761172f565b15610ca35760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610ccf7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b9296105dd61170a565b610d0a5760405162461bcd60e51b8152600401808060200182810382526031815260200180611ee96031913960400191505060405180910390fd5b60008111610d5f576040805162461bcd60e51b815260206004820152601c60248201527f426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465203000000000604482015290519081900360640190fd5b6000610d69610540565b11610da55760405162461bcd60e51b8152600401808060200182810382526030815260200180611fbb6030913960400191505060405180910390fd5b6000610daf6114e0565b6040015190506000610dde610dd7610dc5610540565b61052c86670de0b6b3a76400006115f0565b83906116b0565b60408051606081018252438152602081018681529181018381526009805460018101825560009190915282517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af60039092029182015592517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b0840155517f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7b190920191909155909150610ea5610e9161170a565b6007546001600160a01b03169030876118c7565b610ead61170a565b6001600160a01b03167fac24935fd910bc682b5ccb1a07b718cadf8cf2f6d1404c4f3ddc3662dae40e29856040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff19918216811790925533845291909220805490911690911790555050565b600081565b610f3b61170e565b15610f775760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610f7f61172f565b15610fbb5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b610fc361170a565b6001600160a01b03811615611043576001600160a01b038116600090815260086020908152604091829020825180840190935280548352600101549082015261100b826104bf565b60208201526110186109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b60008211611098576040805162461bcd60e51b815260206004820152601960248201527f426f617264726f6f6d3a2043616e6e6f74207374616b65203000000000000000604482015290519081900360640190fd5b6110a18261193c565b6110a961170a565b6001600160a01b03167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d836040518082815260200191505060405180910390a250504360009081526006602090815260408083203284529091528082208054600160ff1991821681179092553384529190922080549091169091179055565b61113061170a565b6001600160a01b038116156111b0576001600160a01b0381166000908152600860209081526040918290208251808401909352805483526001015490820152611178826104bf565b60208201526111856109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b6000600860006111be61170a565b6001600160a01b0316815260208101919091526040016000206001015490508015610994576000600860006111f161170a565b6001600160a01b0316815260208101919091526040016000206001015561122c61121961170a565b6007546001600160a01b031690836119c1565b61123461170a565b6001600160a01b03167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486826040518082815260200191505060405180910390a25050565b60008181526003602052604081206105ab90611a2d565b6000828152600360205260409020600201546112ad906105dd61170a565b6109ef5760405162461bcd60e51b8152600401808060200182810382526030815260200180611f8b6030913960400191505060405180910390fd5b60006112f261170e565b1561132e5760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b61133661172f565b156113725760405162461bcd60e51b81526004018080602001828103825260268152602001806120966026913960400191505060405180910390fd5b600061137f61078361170a565b116113bb5760405162461bcd60e51b81526004018080602001828103825260268152602001806120466026913960400191505060405180910390fd5b6113c361170a565b6001600160a01b03811615611443576001600160a01b038116600090815260086020908152604091829020825180840190935280548352600101549082015261140b826104bf565b60208201526114186109f9565b81526001600160a01b0382166000908152600860209081526040909120825181559101516001909101555b600061144d611a38565b9050611457611128565b4360009081526006602090815260408083203284529091528082208054600160ff199182168117909255338452919092208054909116909117905592915050565b7f97667070c54ef182b0f5858b034beac1b6f3089aa2d3188bb1e8929f4fa9b92981565b6000546001600160a01b031681565b6000610bfc836001600160a01b038416611a51565b6114e8611e76565b60096114f26109f9565b815481106114fc57fe5b90600052602060002090600302016040518060600160405290816000820154815260200160018201548152602001600282015481525050905090565b611540611e76565b600961154b83610a69565b8154811061155557fe5b906000526020600020906003020160405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b6000828211156115ea576040805162461bcd60e51b815260206004820152601e60248201527f536166654d6174683a207375627472616374696f6e206f766572666c6f770000604482015290519081900360640190fd5b50900390565b6000826115ff575060006105ab565b8282028284828161160c57fe5b0414610bfc5760405162461bcd60e51b8152600401808060200182810382526021815260200180611feb6021913960400191505060405180910390fd5b600080821161169f576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b8183816116a857fe5b049392505050565b600082820183811015610bfc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b3390565b43600090815260066020908152604080832032845290915290205460ff1690565b43600090815260066020908152604080832033845290915290205460ff1690565b60015461175d9082611593565b600155611790816002600061177061170a565b6001600160a01b0316815260208101919091526040016000205490611593565b6002600061179c61170a565b6001600160a01b031681526020810191909152604001600020556106eb6117c161170a565b6000546001600160a01b031690836119c1565b60008281526003602052604090206117ec90826114cb565b15610994576117f961170a565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60008281526003602052604090206118559082611a9b565b156109945761186261170a565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b6000610bfc8383611ab0565b6000610bfc836001600160a01b038416611b14565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052611936908590611b2c565b50505050565b60015461194990826116b0565b60015561197c816002600061195c61170a565b6001600160a01b03168152602081019190915260400160002054906116b0565b6002600061198861170a565b6001600160a01b031681526020810191909152604001600020556106eb6119ad61170a565b6000546001600160a01b03169030846118c7565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052611a28908490611b2c565b505050565b60006105ab82611bdd565b600080611a4661078361170a565b9050610a0a816106ee565b6000611a5d8383611b14565b611a93575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105ab565b5060006105ab565b6000610bfc836001600160a01b038416611be1565b81546000908210611af25760405162461bcd60e51b8152600401808060200182810382526022815260200180611e986022913960400191505060405180910390fd5b826000018281548110611b0157fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b6000611b81826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611ca79092919063ffffffff16565b805190915015611a2857808060200190516020811015611ba057600080fd5b5051611a285760405162461bcd60e51b815260040180806020018281038252602a81526020018061206c602a913960400191505060405180910390fd5b5490565b60008181526001830160205260408120548015611c9d5783546000198083019190810190600090879083908110611c1457fe5b9060005260206000200154905080876000018481548110611c3157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080611c6157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105ab565b60009150506105ab565b6060610538848460008585611cbb85611dcc565b611d0c576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b600080866001600160a01b031685876040518082805190602001908083835b60208310611d4a5780518252601f199092019160209182019101611d2b565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611dac576040519150601f19603f3d011682016040523d82523d6000602084013e611db1565b606091505b5091509150611dc1828286611dd2565b979650505050505050565b3b151590565b60608315611de1575081610bfc565b825115611df15782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611e3b578181015183820152602001611e23565b50505050905090810190601f168015611e685780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b6040518060600160405280600081526020016000815260200160008152509056fe456e756d657261626c655365743a20696e646578206f7574206f6620626f756e6473416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f206772616e744f70657261746f72416363657373436f6e74726f6c3a2073656e646572207265717569726573207065726d697373696f6e41646d696e416363657373436f6e74726f6c48656c7065723a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f7241646d696e416363657373436f6e74726f6c48656c7065723a2073656e646572207265717569726573207065726d697373696f6e416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e2061646d696e20746f207265766f6b65426f617264726f6f6d3a2043616e6e6f7420616c6c6f63617465207768656e20746f74616c537570706c792069732030536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f774f70657261746f72416363657373436f6e74726f6c3a207a65726f206164647265737320676976656e20666f72206e6577206f70657261746f72426f617264726f6f6d3a20546865206469726563746f7220646f6573206e6f742065786973745361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564436f6e747261637447756172643a206f6e6520626c6f636b2c206f6e652066756e6374696f6e416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636520726f6c657320666f722073656c66a164736f6c6343000706000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "balanceOf(address)": {
        "params": {
          "account": "Account for which the balance is requested"
        }
      },
      "exit()": {
        "returns": {
          "_0": "The amount of LP tokens withdrawn"
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "stake(uint256)": {
        "params": {
          "amount": "Amount of LP tokens to stake"
        }
      },
      "withdraw(uint256)": {
        "params": {
          "amount": "Amount of LP tokens to be withdrawn"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the current balance of the given account"
      },
      "exit()": {
        "notice": "Exiting for the message sender. It performs a withdraw of all the staked tokens. The caller will receive the LP tokens to be withdrawn This method can only be called by the contract operator"
      },
      "stake(uint256)": {
        "notice": "Staking for the message sender. The caller holds the LP tokens to be staked This method can only be called by the contract operator"
      },
      "totalSupply()": {
        "notice": "Returns the total supply of LP tokens staked in the contract"
      },
      "withdraw(uint256)": {
        "notice": "Withdrawal for the message sender The caller will receive the LP tokens to be withdrawn This method can only be called by the contract operator"
      }
    },
    "notice": "Baordroom contract where the share holders can stake their _token Shares in exchange of rewards in _token Tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6761,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC20)2146"
      },
      {
        "astId": 6763,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6767,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 22,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_roles",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 5142,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_admin",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 5279,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_operator",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 9942,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 7091,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "_token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC20)2146"
      },
      {
        "astId": 7095,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "directors",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_struct(Boardseat)7082_storage)"
      },
      {
        "astId": 7098,
        "contract": "contracts/governance/Boardroom.sol:Boardroom",
        "label": "boardHistory",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(BoardSnapshot)7089_storage)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(BoardSnapshot)7089_storage)dyn_storage": {
        "base": "t_struct(BoardSnapshot)7089_storage",
        "encoding": "dynamic_array",
        "label": "struct Boardroom.BoardSnapshot[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)2146": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(Boardseat)7082_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Boardroom.Boardseat)",
        "numberOfBytes": "32",
        "value": "t_struct(Boardseat)7082_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_struct(AddressSet)3146_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3145,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)2881_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BoardSnapshot)7089_storage": {
        "encoding": "inplace",
        "label": "struct Boardroom.BoardSnapshot",
        "members": [
          {
            "astId": 7084,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "time",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7086,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "rewardReceived",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 7088,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "rewardPerShare",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Boardseat)7082_storage": {
        "encoding": "inplace",
        "label": "struct Boardroom.Boardseat",
        "members": [
          {
            "astId": 7079,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "lastSnapshotIndex",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7081,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "rewardEarned",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)3146_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)2881_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 2876,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 2880,
            "contract": "contracts/governance/Boardroom.sol:Boardroom",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}